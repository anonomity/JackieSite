{"data":{"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"path\": \"/offline-firebase\",\n  \"date\": \"25-02-2021\",\n  \"title\": \"Offline Application\",\n  \"category\": \"WebDev\",\n  \"tags\": [\"React\", \"React-Native\", \"firebase\", \"redux\", \"nodejs\"],\n  \"exerpt\": \"I will be making my react-native app persistent with Redux\",\n  \"status\": \"🌱\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, `Regret but not fully`), mdx(\"p\", null, `So I'm in the middle of development for an app I plan on releasing soon. This started making me think about all the things that could go wrong when people\nstart using this application. I implemented a REST React-Native application that using firebase as the database. When I started researching about offline capabilities\nI found that firebase ships its product with solutions to making your application offline friendly right off the bat 😁 great, eh? No... Because I made my\napplication REST, so the app makes requests to a server, it basically looses all those offline features 🤦‍♀️.. But okay let's not be all negative, the `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `good`), ` thing\nabout REST is that, let say for my mobile app, I don't use the server functions but I just put the firebase functions directly into my Client code, I plan on\nmaking a website as well so the user can sync data across all devices, so I can still use that backend code for the website.`), mdx(\"h2\", null, `Offline as a First class citizen 👮🏻‍♀️`), mdx(\"p\", null, `This concept is too often overlooked when creating mobile applications, it should be at the forfront when you start a project.\nFor some applications it might be harder to maintain all functionality while being offline, like for instance with Instagram,\nwhen the user is offline, the last feed you saw is saved to your phone storage but you can't see any new posts (makes sense).\nBut for other applications, most operations should remain usable even while the connection is cut. `), mdx(\"h2\", null, `Subscribing to connectivity changes`), mdx(\"p\", null, `Beware there is a lot of outdated information on the interwebs. I wrote and tested this in 2021 so yea..\nReact native no longer supports NetInfo, so thats why we need to use the community version.\nSo firstly lets import the needed library`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `@react-native-community/netinfo\n`)), mdx(\"p\", null, `So using this we will add an event listener to the root stack in our navigator, that way wherever we are in the app, it will\ndetect when we loose connection and update the redux store. So in this case I'm using a Banner from the library react-native-paper,\nI also added a state variable that updates with the changing internet status so that it shows the banner when we loose or dont have\nconnection`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `\n  const [visible, setVisible] = useState(true);\n  const [connected, setConnected] = useState(true);\n  useEffect(() => {\n    NetInfo.addEventListener((state) => {\n      if (!state.isConnected) {\n        setConnected(false);\n        dispatch(SetOffline());\n      }\n      console.log('Connection type', state.type);\n      console.log('Is connected?', state.isConnected);\n          });\n  }, [dispatch]);\n\nreturn(\n    <View>\n        {connected ? null : (\n          <Banner\n            visible={visible}\n            actions={[\n              {\n                label: 'Fix it',\n                onPress: () => setVisible(false),\n              },\n              {\n                label: 'Learn more',\n                onPress: () => setVisible(false),\n              },\n            ]}\n            icon={(props) => (\n              <AntDesign {...props} color={'maroon'} name=\"wifi\" />\n            )}>\n            No Internet Connection, you can continue to use the application in\n            offline mode\n          </Banner>\n        )}\n    </View>\n)\n`)), mdx(\"h2\", null, `Tests`), mdx(\"p\", null, ` So I'm pretty amazed at how easily the offline functions works with Firebase, but now its time for some Tests`), mdx(\"h3\", null, `1. Go Offline -> update data -> logout -> Go Back Online -> login`), mdx(\"p\", null, ` Wow so I am amazed that this worked, as soon as I logged in I kept an eye on the database and it updated 🥳`));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Offline Application","date":"25-02-2021","status":"🌱"},"timeToRead":2}},"pageContext":{"pathSlug":"/offline-firebase"}}