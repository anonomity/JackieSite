{"expireTime":9007200915307319000,"key":"gatsby-plugin-mdx-entire-payload-9312c56073459b1b3e46bdce23433f92-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Breadcrumbs - 20","position":{"start":{"line":5,"column":4,"offset":11},"end":{"line":5,"column":20,"offset":27},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":8},"end":{"line":5,"column":21,"offset":28},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is the first solution I encountered where you allow the player to drop objects that disappear overtime so if the entity loses sight of the player, it decides to look for you breadcrumbs instead. I tried out this solution but I didn’t really enjoy, I wanted something more flexible and smarter. So I searched onwards. But learning this wasn’t a waste of time because through following the tutorial suggested in this article I grasped fsm much better. ","position":{"start":{"line":6,"column":1,"offset":30},"end":{"line":6,"column":456,"offset":485},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":30},"end":{"line":6,"column":456,"offset":485},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Nav2dServer get_map_path() - 40 seconds","position":{"start":{"line":9,"column":4,"offset":494},"end":{"line":9,"column":43,"offset":533},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":491},"end":{"line":9,"column":43,"offset":533},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next I tried a new method from nav2d node. The Navigation Node provides navigation and pathfinding within a 2d area, all you do is add it as the parent of ur tilemap, add nav collisions to the tilemap that the entity can navigate on and ur gucci, you then have access to the get_map_path function, which returns path to the entity your following.","position":{"start":{"line":10,"column":1,"offset":535},"end":{"line":10,"column":347,"offset":881},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":535},"end":{"line":10,"column":347,"offset":881},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The problem with the path that was generated was that it skimmed the collider and the entity would get stuck, i put the problem on reddit and the only solution was adding non navable tile  “padding” where the entity cannot go. But i didn’t like this solution because u can go to a padding tile ull be safe because the entity cannot walk on that tile, also if ur entity is bigger than a tile, it would still get stuck","position":{"start":{"line":12,"column":1,"offset":885},"end":{"line":12,"column":417,"offset":1301},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":885},"end":{"line":12,"column":417,"offset":1301},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So i scraped all my work again and searched on","position":{"start":{"line":14,"column":1,"offset":1305},"end":{"line":14,"column":47,"offset":1351},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1305},"end":{"line":14,"column":47,"offset":1351},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":16,"column":1,"offset":1355},"end":{"line":16,"column":4,"offset":1358},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Context Steering","position":{"start":{"line":18,"column":4,"offset":1365},"end":{"line":18,"column":20,"offset":1381},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1362},"end":{"line":18,"column":20,"offset":1381},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So while surfing the web to get ideas for a really smart AI I encountered a video by Game Endevor. I can’t recommend this video more but to give you the gist of it, he made an AI that used Context Steering behaviors, which keeps a record of desirable and undesirable directions and makes a decision based off those parameters. He didn’t provide code for the implementation so I really needed understand the system before tackling it myself.","position":{"start":{"line":19,"column":1,"offset":1383},"end":{"line":19,"column":441,"offset":1823},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1383},"end":{"line":19,"column":441,"offset":1823},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Thankfully he suggested a chapter from an AI book which was the perfect place to start. The chapter was 11 pages and after skimming it, I felt enlightened. It outlines all the obscurities with implementing this context steering, check it out if ur coo, btw I wanna give a shoutout to mah boi Craig Reynolds for developing the system, he’s my dawg. \nAfter reading the chapter I was so stoked, I broke it down and thought about how I would implement the system in godot. ","position":{"start":{"line":21,"column":1,"offset":1827},"end":{"line":22,"column":121,"offset":2297},"indent":[1]}}],"position":{"start":{"line":21,"column":1,"offset":1827},"end":{"line":22,"column":121,"offset":2297},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Firstly I knew I had to have an interest vector. \nIn my case my entity would be interested in chasing us, but this system is so flexible, you can make multiple behaviors interesting,\nfor instance circling around a player,\nrunning away from the player,\nmoving towards certain items ","position":{"start":{"line":24,"column":1,"offset":2301},"end":{"line":28,"column":30,"offset":2586},"indent":[1,1,1,1]}}],"position":{"start":{"line":24,"column":1,"offset":2301},"end":{"line":28,"column":30,"offset":2586},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"But for the first implementation i chose 1 variable, moving toward the player","position":{"start":{"line":30,"column":1,"offset":2590},"end":{"line":30,"column":78,"offset":2667},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":2590},"end":{"line":30,"column":78,"offset":2667},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So in the get_map_path function I’m getting the first index in that path which is vector in the direction of the player","position":{"start":{"line":32,"column":1,"offset":2671},"end":{"line":32,"column":120,"offset":2790},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":2671},"end":{"line":32,"column":120,"offset":2790},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"But I had to convert this vector into a single number to represent interest.","position":{"start":{"line":34,"column":1,"offset":2794},"end":{"line":34,"column":77,"offset":2870},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":2794},"end":{"line":34,"column":77,"offset":2870},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So I added 8 raycasts around the entity representing the 8 directions the entity can move. I also have an array which converts these raycasts as a vector, 01 is down, 10 is to the right ect. ","position":{"start":{"line":38,"column":1,"offset":2878},"end":{"line":38,"column":192,"offset":3069},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2878},"end":{"line":38,"column":192,"offset":3069},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now I have a vector pointing toward the direction of the player, what I do next is get the DOT product of the player direction vector, against the array of vectors representing each direction the entity CAN move. The result is a new vector with values between -1 and 1, the higher the value, the more interest the entity has in moving in that direction. If we have 2 areas of interest we can add these 2 dot products together, but beware, this can mess up the results, but I will explain why in a minute.","position":{"start":{"line":40,"column":1,"offset":3073},"end":{"line":40,"column":505,"offset":3577},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":3073},"end":{"line":40,"column":505,"offset":3577},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next we need an array of danger, so we added those 8 raycasts around out entity and these raycasts can be used to detect if something is interesting and we want to move toward it, but it can also be used if something is bad for out entity and we should move away, \nfor instance,","position":{"start":{"line":43,"column":1,"offset":3583},"end":{"line":44,"column":14,"offset":3862},"indent":[1]}}],"position":{"start":{"line":43,"column":1,"offset":3583},"end":{"line":44,"column":14,"offset":3862},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"A wall\nAnother entity\nSomething that can damage us\nA distance too far away from us","position":{"start":{"line":46,"column":1,"offset":3866},"end":{"line":49,"column":32,"offset":3951},"indent":[1,1,1]}}],"position":{"start":{"line":46,"column":1,"offset":3866},"end":{"line":49,"column":32,"offset":3951},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So what we do if we detect a wall, is we take that direction and we add a value a positive value representing the danger. Then we will have an array of areas our entity DOES NOT want to move. What we do with this array is we subtract it with the interest array but BEWARE, remember I said the dot product is between -1 and 1 and that we can add dot products together, if we choose a small number representing danger like 1 and in the previous section we had an interest of 1,5 in a particular direction because we added an interest of 1 and .5, it would leave us with ,5 in a position thats dangerous so 1 to represent danger is probably not enough in certain situations so keep it in mind, I also have padded out the danger so that the directions adjacent to the danger are also a bit dangerous. ","position":{"start":{"line":51,"column":1,"offset":3955},"end":{"line":51,"column":798,"offset":4752},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":3955},"end":{"line":51,"column":798,"offset":4752},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once we get this array of numbers representing the interest in each direction we convert the highest number into a direction and that is the direction our entity should take! ","position":{"start":{"line":53,"column":1,"offset":4756},"end":{"line":53,"column":176,"offset":4931},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":4756},"end":{"line":53,"column":176,"offset":4931},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now this actually did work, but I was still getting some stutters, because the entity wanted to move in a direction, and then that direction detected a danger to it moved away no danger so then it moved back danger and the process went on into infinity. So this is where steering force came in, because before I was just plugging the best direction straight into the move and slide function and calling it a day, but this is not the correct method. ","position":{"start":{"line":55,"column":1,"offset":4935},"end":{"line":55,"column":450,"offset":5384},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":4935},"end":{"line":55,"column":450,"offset":5384},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now remember our homie Craig Reynolds well he talked about idealized vehicles, as a series of three layers, action selection, steering and locomotion, so we already selected the action, and now we need to steer the damn thing. We can ignore the locomotion because our entity is simple, we tell it a direction and it moves, we don’t have to control limbs here.","position":{"start":{"line":57,"column":1,"offset":5388},"end":{"line":57,"column":360,"offset":5747},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":5388},"end":{"line":57,"column":360,"offset":5747},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So there is actually an equation that delivers realistic steering and the best part is (its simple)","position":{"start":{"line":59,"column":1,"offset":5751},"end":{"line":59,"column":100,"offset":5850},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":5751},"end":{"line":59,"column":100,"offset":5850},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"** steering_force = desired_velocity - current_velocity","position":{"start":{"line":61,"column":1,"offset":5854},"end":{"line":61,"column":56,"offset":5909},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":5854},"end":{"line":61,"column":56,"offset":5909},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So instead of plugging in the interest directly into our move in slide, we will instead make the interest the Acceleration, and we will add the acceleration to our velocity, the really cool thing about doing it this way is I can control how fast the entity turns. A good way to think about this is by imagining an elephant chasing a target and a cheetah chasing a target, if that target makes a sharp turn the elephant will make a much rounder turn than the cheetah which will turn very sharp. And when I get the acceleration I can multiply it by a number, the higher the number the more sharp the turn, the lower the number, the more rounded the turn and when depending on the speed of ur entity, you must tweek this value if you’re still getting stuck on colliders. ","position":{"start":{"line":63,"column":1,"offset":5913},"end":{"line":63,"column":769,"offset":6681},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":5913},"end":{"line":63,"column":769,"offset":6681},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":". And when this was all complete the ai worked like a charm and I combined this solution with state machines to get some really cool results, you see because of this interest, we can tell the entity to favor whatever direction we want. So in the game endeavor video he had cool combat behaviors where the entity circles around and comes in for the attack and then goes back out and I wanted to replicate this just to see how sharp my implementation was, when it worked it made me feel SOOO good! ","position":{"start":{"line":67,"column":1,"offset":6689},"end":{"line":67,"column":497,"offset":7185},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":6689},"end":{"line":67,"column":497,"offset":7185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"But I wanted to program my own unique boss, so i came up with a boss area, and I prototyped the level using Tiled which made the level design process so easy and i thought of different behaviors for the boss. And my mind was amazed by the potential of the system. You see in phase 1 I favored movement away from the player because Silenus has a ranged attack, but I was having an issue where he was hugging the walls too much, so I favored running away and staying in the middle of the arena, and it worked so splendidly I wanted to cry. ","position":{"start":{"line":69,"column":1,"offset":7189},"end":{"line":69,"column":539,"offset":7727},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":7189},"end":{"line":69,"column":539,"offset":7727},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now I want to take some time to discuss the finite state machines I’m using, because in conjunction with context steering, it just makes the entity so much smarter. ","position":{"start":{"line":71,"column":1,"offset":7731},"end":{"line":71,"column":166,"offset":7896},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":7731},"end":{"line":71,"column":166,"offset":7896},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So the important rule of thumb is that the state SHOULD never make the decision of changing states, each state should simply emit various signals and the entity should interpret that signal and decide which state to change to. For instance lets talk about the circling behavior from before, we have a generic chase state that runs toward our player, and once the entity gets within a particular distance it can emit a signal and our entity can start circling the player, but with that same chase state another entity can use it and once it gets to that same particular distance and it receives that signal it can ignore it a keep chasing our player and get right next to it get a signal that its within range and then change to an attack state, when you set up the state machines like these it makes it very flexible and it makes it so much easier to have many enemies with different behaviors while reusing the states.","position":{"start":{"line":73,"column":1,"offset":7900},"end":{"line":73,"column":920,"offset":8819},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":7900},"end":{"line":73,"column":920,"offset":8819},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"path\":\"/enemy_ai\",\"date\":\"15-08-2022\",\"title\":\"Enemy AI in Godot\",\"category\":\"GameDev\",\"tags\":[\"Godot\",\"youtube\",\"Game Development\"],\"exerpt\":\"my journey to developing the best AI for Hypatia\",\"status\":\"🌱\"}","position":{"start":{"line":76,"column":1,"offset":8823},"end":{"line":76,"column":238,"offset":9060},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":76,"column":238,"offset":9060}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"path\": \"/enemy_ai\",\n  \"date\": \"15-08-2022\",\n  \"title\": \"Enemy AI in Godot\",\n  \"category\": \"GameDev\",\n  \"tags\": [\"Godot\", \"youtube\", \"Game Development\"],\n  \"exerpt\": \"my journey to developing the best AI for Hypatia\",\n  \"status\": \"🌱\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, `Breadcrumbs - 20`), mdx(\"p\", null, `This is the first solution I encountered where you allow the player to drop objects that disappear overtime so if the entity loses sight of the player, it decides to look for you breadcrumbs instead. I tried out this solution but I didn’t really enjoy, I wanted something more flexible and smarter. So I searched onwards. But learning this wasn’t a waste of time because through following the tutorial suggested in this article I grasped fsm much better. `), mdx(\"h2\", null, `Nav2dServer get_map_path() - 40 seconds`), mdx(\"p\", null, `Next I tried a new method from nav2d node. The Navigation Node provides navigation and pathfinding within a 2d area, all you do is add it as the parent of ur tilemap, add nav collisions to the tilemap that the entity can navigate on and ur gucci, you then have access to the get_map_path function, which returns path to the entity your following.`), mdx(\"p\", null, `The problem with the path that was generated was that it skimmed the collider and the entity would get stuck, i put the problem on reddit and the only solution was adding non navable tile  “padding” where the entity cannot go. But i didn’t like this solution because u can go to a padding tile ull be safe because the entity cannot walk on that tile, also if ur entity is bigger than a tile, it would still get stuck`), mdx(\"p\", null, `So i scraped all my work again and searched on`), mdx(\"hr\", null), mdx(\"h2\", null, `Context Steering`), mdx(\"p\", null, `So while surfing the web to get ideas for a really smart AI I encountered a video by Game Endevor. I can’t recommend this video more but to give you the gist of it, he made an AI that used Context Steering behaviors, which keeps a record of desirable and undesirable directions and makes a decision based off those parameters. He didn’t provide code for the implementation so I really needed understand the system before tackling it myself.`), mdx(\"p\", null, `Thankfully he suggested a chapter from an AI book which was the perfect place to start. The chapter was 11 pages and after skimming it, I felt enlightened. It outlines all the obscurities with implementing this context steering, check it out if ur coo, btw I wanna give a shoutout to mah boi Craig Reynolds for developing the system, he’s my dawg.\nAfter reading the chapter I was so stoked, I broke it down and thought about how I would implement the system in godot. `), mdx(\"p\", null, `Firstly I knew I had to have an interest vector.\nIn my case my entity would be interested in chasing us, but this system is so flexible, you can make multiple behaviors interesting,\nfor instance circling around a player,\nrunning away from the player,\nmoving towards certain items `), mdx(\"p\", null, `But for the first implementation i chose 1 variable, moving toward the player`), mdx(\"p\", null, `So in the get_map_path function I’m getting the first index in that path which is vector in the direction of the player`), mdx(\"p\", null, `But I had to convert this vector into a single number to represent interest.`), mdx(\"p\", null, `So I added 8 raycasts around the entity representing the 8 directions the entity can move. I also have an array which converts these raycasts as a vector, 01 is down, 10 is to the right ect. `), mdx(\"p\", null, `Now I have a vector pointing toward the direction of the player, what I do next is get the DOT product of the player direction vector, against the array of vectors representing each direction the entity CAN move. The result is a new vector with values between -1 and 1, the higher the value, the more interest the entity has in moving in that direction. If we have 2 areas of interest we can add these 2 dot products together, but beware, this can mess up the results, but I will explain why in a minute.`), mdx(\"p\", null, `Next we need an array of danger, so we added those 8 raycasts around out entity and these raycasts can be used to detect if something is interesting and we want to move toward it, but it can also be used if something is bad for out entity and we should move away,\nfor instance,`), mdx(\"p\", null, `A wall\nAnother entity\nSomething that can damage us\nA distance too far away from us`), mdx(\"p\", null, `So what we do if we detect a wall, is we take that direction and we add a value a positive value representing the danger. Then we will have an array of areas our entity DOES NOT want to move. What we do with this array is we subtract it with the interest array but BEWARE, remember I said the dot product is between -1 and 1 and that we can add dot products together, if we choose a small number representing danger like 1 and in the previous section we had an interest of 1,5 in a particular direction because we added an interest of 1 and .5, it would leave us with ,5 in a position thats dangerous so 1 to represent danger is probably not enough in certain situations so keep it in mind, I also have padded out the danger so that the directions adjacent to the danger are also a bit dangerous. `), mdx(\"p\", null, `Once we get this array of numbers representing the interest in each direction we convert the highest number into a direction and that is the direction our entity should take! `), mdx(\"p\", null, `Now this actually did work, but I was still getting some stutters, because the entity wanted to move in a direction, and then that direction detected a danger to it moved away no danger so then it moved back danger and the process went on into infinity. So this is where steering force came in, because before I was just plugging the best direction straight into the move and slide function and calling it a day, but this is not the correct method. `), mdx(\"p\", null, `Now remember our homie Craig Reynolds well he talked about idealized vehicles, as a series of three layers, action selection, steering and locomotion, so we already selected the action, and now we need to steer the damn thing. We can ignore the locomotion because our entity is simple, we tell it a direction and it moves, we don’t have to control limbs here.`), mdx(\"p\", null, `So there is actually an equation that delivers realistic steering and the best part is (its simple)`), mdx(\"p\", null, `** steering_force = desired_velocity - current_velocity`), mdx(\"p\", null, `So instead of plugging in the interest directly into our move in slide, we will instead make the interest the Acceleration, and we will add the acceleration to our velocity, the really cool thing about doing it this way is I can control how fast the entity turns. A good way to think about this is by imagining an elephant chasing a target and a cheetah chasing a target, if that target makes a sharp turn the elephant will make a much rounder turn than the cheetah which will turn very sharp. And when I get the acceleration I can multiply it by a number, the higher the number the more sharp the turn, the lower the number, the more rounded the turn and when depending on the speed of ur entity, you must tweek this value if you’re still getting stuck on colliders. `), mdx(\"p\", null, `. And when this was all complete the ai worked like a charm and I combined this solution with state machines to get some really cool results, you see because of this interest, we can tell the entity to favor whatever direction we want. So in the game endeavor video he had cool combat behaviors where the entity circles around and comes in for the attack and then goes back out and I wanted to replicate this just to see how sharp my implementation was, when it worked it made me feel SOOO good! `), mdx(\"p\", null, `But I wanted to program my own unique boss, so i came up with a boss area, and I prototyped the level using Tiled which made the level design process so easy and i thought of different behaviors for the boss. And my mind was amazed by the potential of the system. You see in phase 1 I favored movement away from the player because Silenus has a ranged attack, but I was having an issue where he was hugging the walls too much, so I favored running away and staying in the middle of the arena, and it worked so splendidly I wanted to cry. `), mdx(\"p\", null, `Now I want to take some time to discuss the finite state machines I’m using, because in conjunction with context steering, it just makes the entity so much smarter. `), mdx(\"p\", null, `So the important rule of thumb is that the state SHOULD never make the decision of changing states, each state should simply emit various signals and the entity should interpret that signal and decide which state to change to. For instance lets talk about the circling behavior from before, we have a generic chase state that runs toward our player, and once the entity gets within a particular distance it can emit a signal and our entity can start circling the player, but with that same chase state another entity can use it and once it gets to that same particular distance and it receives that signal it can ignore it a keep chasing our player and get right next to it get a signal that its within range and then change to an attack state, when you set up the state machines like these it makes it very flexible and it makes it so much easier to have many enemies with different behaviors while reusing the states.`));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"path\": \"/enemy_ai\",\n  \"date\": \"15-08-2022\",\n  \"title\": \"Enemy AI in Godot\",\n  \"category\": \"GameDev\",\n  \"tags\": [\"Godot\", \"youtube\", \"Game Development\"],\n  \"exerpt\": \"my journey to developing the best AI for Hypatia\",\n  \"status\": \"🌱\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Breadcrumbs - 20`}</h2>\n    <p>{`This is the first solution I encountered where you allow the player to drop objects that disappear overtime so if the entity loses sight of the player, it decides to look for you breadcrumbs instead. I tried out this solution but I didn’t really enjoy, I wanted something more flexible and smarter. So I searched onwards. But learning this wasn’t a waste of time because through following the tutorial suggested in this article I grasped fsm much better. `}</p>\n    <h2>{`Nav2dServer get_map_path() - 40 seconds`}</h2>\n    <p>{`Next I tried a new method from nav2d node. The Navigation Node provides navigation and pathfinding within a 2d area, all you do is add it as the parent of ur tilemap, add nav collisions to the tilemap that the entity can navigate on and ur gucci, you then have access to the get_map_path function, which returns path to the entity your following.`}</p>\n    <p>{`The problem with the path that was generated was that it skimmed the collider and the entity would get stuck, i put the problem on reddit and the only solution was adding non navable tile  “padding” where the entity cannot go. But i didn’t like this solution because u can go to a padding tile ull be safe because the entity cannot walk on that tile, also if ur entity is bigger than a tile, it would still get stuck`}</p>\n    <p>{`So i scraped all my work again and searched on`}</p>\n    <hr></hr>\n    <h2>{`Context Steering`}</h2>\n    <p>{`So while surfing the web to get ideas for a really smart AI I encountered a video by Game Endevor. I can’t recommend this video more but to give you the gist of it, he made an AI that used Context Steering behaviors, which keeps a record of desirable and undesirable directions and makes a decision based off those parameters. He didn’t provide code for the implementation so I really needed understand the system before tackling it myself.`}</p>\n    <p>{`Thankfully he suggested a chapter from an AI book which was the perfect place to start. The chapter was 11 pages and after skimming it, I felt enlightened. It outlines all the obscurities with implementing this context steering, check it out if ur coo, btw I wanna give a shoutout to mah boi Craig Reynolds for developing the system, he’s my dawg.\nAfter reading the chapter I was so stoked, I broke it down and thought about how I would implement the system in godot. `}</p>\n    <p>{`Firstly I knew I had to have an interest vector.\nIn my case my entity would be interested in chasing us, but this system is so flexible, you can make multiple behaviors interesting,\nfor instance circling around a player,\nrunning away from the player,\nmoving towards certain items `}</p>\n    <p>{`But for the first implementation i chose 1 variable, moving toward the player`}</p>\n    <p>{`So in the get_map_path function I’m getting the first index in that path which is vector in the direction of the player`}</p>\n    <p>{`But I had to convert this vector into a single number to represent interest.`}</p>\n    <p>{`So I added 8 raycasts around the entity representing the 8 directions the entity can move. I also have an array which converts these raycasts as a vector, 01 is down, 10 is to the right ect. `}</p>\n    <p>{`Now I have a vector pointing toward the direction of the player, what I do next is get the DOT product of the player direction vector, against the array of vectors representing each direction the entity CAN move. The result is a new vector with values between -1 and 1, the higher the value, the more interest the entity has in moving in that direction. If we have 2 areas of interest we can add these 2 dot products together, but beware, this can mess up the results, but I will explain why in a minute.`}</p>\n    <p>{`Next we need an array of danger, so we added those 8 raycasts around out entity and these raycasts can be used to detect if something is interesting and we want to move toward it, but it can also be used if something is bad for out entity and we should move away,\nfor instance,`}</p>\n    <p>{`A wall\nAnother entity\nSomething that can damage us\nA distance too far away from us`}</p>\n    <p>{`So what we do if we detect a wall, is we take that direction and we add a value a positive value representing the danger. Then we will have an array of areas our entity DOES NOT want to move. What we do with this array is we subtract it with the interest array but BEWARE, remember I said the dot product is between -1 and 1 and that we can add dot products together, if we choose a small number representing danger like 1 and in the previous section we had an interest of 1,5 in a particular direction because we added an interest of 1 and .5, it would leave us with ,5 in a position thats dangerous so 1 to represent danger is probably not enough in certain situations so keep it in mind, I also have padded out the danger so that the directions adjacent to the danger are also a bit dangerous. `}</p>\n    <p>{`Once we get this array of numbers representing the interest in each direction we convert the highest number into a direction and that is the direction our entity should take! `}</p>\n    <p>{`Now this actually did work, but I was still getting some stutters, because the entity wanted to move in a direction, and then that direction detected a danger to it moved away no danger so then it moved back danger and the process went on into infinity. So this is where steering force came in, because before I was just plugging the best direction straight into the move and slide function and calling it a day, but this is not the correct method. `}</p>\n    <p>{`Now remember our homie Craig Reynolds well he talked about idealized vehicles, as a series of three layers, action selection, steering and locomotion, so we already selected the action, and now we need to steer the damn thing. We can ignore the locomotion because our entity is simple, we tell it a direction and it moves, we don’t have to control limbs here.`}</p>\n    <p>{`So there is actually an equation that delivers realistic steering and the best part is (its simple)`}</p>\n    <p>{`** steering_force = desired_velocity - current_velocity`}</p>\n    <p>{`So instead of plugging in the interest directly into our move in slide, we will instead make the interest the Acceleration, and we will add the acceleration to our velocity, the really cool thing about doing it this way is I can control how fast the entity turns. A good way to think about this is by imagining an elephant chasing a target and a cheetah chasing a target, if that target makes a sharp turn the elephant will make a much rounder turn than the cheetah which will turn very sharp. And when I get the acceleration I can multiply it by a number, the higher the number the more sharp the turn, the lower the number, the more rounded the turn and when depending on the speed of ur entity, you must tweek this value if you’re still getting stuck on colliders. `}</p>\n    <p>{`. And when this was all complete the ai worked like a charm and I combined this solution with state machines to get some really cool results, you see because of this interest, we can tell the entity to favor whatever direction we want. So in the game endeavor video he had cool combat behaviors where the entity circles around and comes in for the attack and then goes back out and I wanted to replicate this just to see how sharp my implementation was, when it worked it made me feel SOOO good! `}</p>\n    <p>{`But I wanted to program my own unique boss, so i came up with a boss area, and I prototyped the level using Tiled which made the level design process so easy and i thought of different behaviors for the boss. And my mind was amazed by the potential of the system. You see in phase 1 I favored movement away from the player because Silenus has a ranged attack, but I was having an issue where he was hugging the walls too much, so I favored running away and staying in the middle of the arena, and it worked so splendidly I wanted to cry. `}</p>\n    <p>{`Now I want to take some time to discuss the finite state machines I’m using, because in conjunction with context steering, it just makes the entity so much smarter. `}</p>\n    <p>{`So the important rule of thumb is that the state SHOULD never make the decision of changing states, each state should simply emit various signals and the entity should interpret that signal and decide which state to change to. For instance lets talk about the circling behavior from before, we have a generic chase state that runs toward our player, and once the entity gets within a particular distance it can emit a signal and our entity can start circling the player, but with that same chase state another entity can use it and once it gets to that same particular distance and it receives that signal it can ignore it a keep chasing our player and get right next to it get a signal that its within range and then change to an attack state, when you set up the state machines like these it makes it very flexible and it makes it so much easier to have many enemies with different behaviors while reusing the states.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}