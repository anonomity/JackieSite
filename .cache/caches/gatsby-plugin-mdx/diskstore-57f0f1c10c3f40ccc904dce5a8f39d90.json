{"expireTime":9007200910296486000,"key":"gatsby-plugin-mdx-entire-payload-6f199c2cb986bb6604576b7666593302-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import img1 from \"./img1.png\";\nimport random from \"./random.png\";\nimport randomWalk from \"./randomWalk.gif\";\nimport Tallpic from \"../../../components/blogComponents/Tallpic\";\nimport Code from \"../../../components/blogComponents/CodeComponent/Code.tsx\";","position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":6,"column":78,"offset":258},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Daniel Shiffman","position":{"start":{"line":8,"column":4,"offset":265},"end":{"line":8,"column":19,"offset":280},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":262},"end":{"line":8,"column":19,"offset":280},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First and foremost I would like to say that I got the idea after reading Daniel Shifman's book ","position":{"start":{"line":10,"column":1,"offset":284},"end":{"line":10,"column":96,"offset":379},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"The Nature Of Code","position":{"start":{"line":10,"column":97,"offset":380},"end":{"line":10,"column":115,"offset":398},"indent":[]}}],"position":{"start":{"line":10,"column":96,"offset":379},"end":{"line":10,"column":116,"offset":399},"indent":[]}},{"type":"text","value":" if you're into that kind of thing, I definitly\nwould urge you to check it out, its super interesting and your brain will be bursting with ideas of what to code gauranteed üëç. I'm writing this because in the\nbook he wrote the random walk in Processing which is a highly interactive programming language that is super fun and helps people learn and visualize and have\na lot of fun with code, but I really wanted to do it in Python so ","position":{"start":{"line":10,"column":116,"offset":399},"end":{"line":13,"column":67,"offset":835},"indent":[1,1,1]}},{"type":"emphasis","children":[{"type":"text","value":"here it is","position":{"start":{"line":13,"column":68,"offset":836},"end":{"line":13,"column":78,"offset":846},"indent":[]}}],"position":{"start":{"line":13,"column":67,"offset":835},"end":{"line":13,"column":79,"offset":847},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":284},"end":{"line":13,"column":79,"offset":847},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Let's get started","position":{"start":{"line":15,"column":4,"offset":854},"end":{"line":15,"column":21,"offset":871},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":851},"end":{"line":15,"column":21,"offset":871},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So for this program all you'll need to have is Python, I will be using 3.9, but I'm sure 3+ should be good. We will be using 2 libraries that already come shipped\nwith python, turtle and random. So random is a library that generates random number (of course its not 100% random because it uses an algorithm but its good\nenough for now). Turtle is a really nice visual library on python that is amazing for making shapes and drawing.","position":{"start":{"line":17,"column":1,"offset":875},"end":{"line":19,"column":113,"offset":1309},"indent":[1,1]}}],"position":{"start":{"line":17,"column":1,"offset":875},"end":{"line":19,"column":113,"offset":1309},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Getting started","position":{"start":{"line":21,"column":4,"offset":1316},"end":{"line":21,"column":19,"offset":1331},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1313},"end":{"line":21,"column":19,"offset":1331},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Open up you favorite python IDE and create a fresh new file, at the top you will\n","position":{"start":{"line":23,"column":1,"offset":1335},"end":{"line":24,"column":1,"offset":1417},"indent":[1]}},{"type":"inlineCode","value":"import turtle.","position":{"start":{"line":24,"column":1,"offset":1417},"end":{"line":24,"column":17,"offset":1433},"indent":[]}},{"type":"text","value":"\nNow that we have access to the library we will\ncreate our first turtle. so for simplicity I will name it t for turtle","position":{"start":{"line":24,"column":17,"offset":1433},"end":{"line":26,"column":71,"offset":1553},"indent":[1,1]}}],"position":{"start":{"line":23,"column":1,"offset":1335},"end":{"line":26,"column":71,"offset":1553},"indent":[1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"t = turtle.Pen()","position":{"start":{"line":28,"column":1,"offset":1557},"end":{"line":30,"column":4,"offset":1583},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"so from this turtle library I'm access a function Pen() that will create our turtle so that we can start drawing. So this Pen function can actually take parameters,\nyou can change the shap to a turtle by doing","position":{"start":{"line":32,"column":1,"offset":1587},"end":{"line":33,"column":45,"offset":1797},"indent":[1]}}],"position":{"start":{"line":32,"column":1,"offset":1587},"end":{"line":33,"column":45,"offset":1797},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"t = turtle.Pen(shape=\"turtle\")","position":{"start":{"line":35,"column":1,"offset":1801},"end":{"line":37,"column":4,"offset":1841},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"or if you don't want any shape you can put","position":{"start":{"line":39,"column":1,"offset":1845},"end":{"line":39,"column":43,"offset":1887},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1845},"end":{"line":39,"column":43,"offset":1887},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"t = turtle.Pen(visible=False)","position":{"start":{"line":41,"column":1,"offset":1891},"end":{"line":43,"column":4,"offset":1930},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Reminder capitilization is very important in code so make sure True has capital T and Pen has capital P","position":{"start":{"line":45,"column":3,"offset":1936},"end":{"line":45,"column":106,"offset":2039},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1934},"end":{"line":45,"column":108,"offset":2041},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1934},"end":{"line":45,"column":108,"offset":2041},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"alrighty so after you make your turtle variable when you now run the program a new window will pop up titled Python Turtle Graphics and there should be a shape unless\nyou put visible = to False","position":{"start":{"line":47,"column":1,"offset":2045},"end":{"line":48,"column":27,"offset":2239},"indent":[1]}}],"position":{"start":{"line":47,"column":1,"offset":2045},"end":{"line":48,"column":27,"offset":2239},"indent":[1]}},{"type":"jsx","value":"<img src={img1} alt=\"turtle varaible\" />  ","position":{"start":{"line":50,"column":1,"offset":2243},"end":{"line":50,"column":43,"offset":2285},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"cool once you see that screen you can start playing around with your turtle, so let's start by making it move. So when we want to \ninteract with our turtle we use the variable we created, in this case it t, so if I want t to move, I must give a ","position":{"start":{"line":52,"column":1,"offset":2289},"end":{"line":53,"column":115,"offset":2535},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"direction","position":{"start":{"line":53,"column":116,"offset":2536},"end":{"line":53,"column":125,"offset":2545},"indent":[]}}],"position":{"start":{"line":53,"column":115,"offset":2535},"end":{"line":53,"column":126,"offset":2546},"indent":[]}},{"type":"text","value":" and \na ","position":{"start":{"line":53,"column":126,"offset":2546},"end":{"line":54,"column":3,"offset":2555},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"distance","position":{"start":{"line":54,"column":4,"offset":2556},"end":{"line":54,"column":12,"offset":2564},"indent":[]}}],"position":{"start":{"line":54,"column":3,"offset":2555},"end":{"line":54,"column":13,"offset":2565},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":54,"column":13,"offset":2565},"end":{"line":54,"column":15,"offset":2567},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2289},"end":{"line":54,"column":15,"offset":2567},"indent":[1,1]}},{"type":"code","lang":null,"meta":null,"value":"t.forward(100)","position":{"start":{"line":55,"column":1,"offset":2569},"end":{"line":57,"column":4,"offset":2593},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"in this case the direction is forward and the distance is 100 pixels","position":{"start":{"line":58,"column":1,"offset":2595},"end":{"line":58,"column":69,"offset":2663},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2595},"end":{"line":58,"column":69,"offset":2663},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"after writing this when you run the program again you should see your little turtle pen draw a line, in my case 100 pixels long.","position":{"start":{"line":60,"column":1,"offset":2667},"end":{"line":60,"column":129,"offset":2795},"indent":[]}},{"type":"break","position":{"start":{"line":60,"column":129,"offset":2795},"end":{"line":61,"column":1,"offset":2799},"indent":[1]}},{"type":"text","value":"Nice now that we got the technicalities out of the way, let's refer back to the random walk, which is our goal.  ","position":{"start":{"line":61,"column":1,"offset":2799},"end":{"line":61,"column":114,"offset":2912},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2667},"end":{"line":61,"column":114,"offset":2912},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Getting a Random Number","position":{"start":{"line":63,"column":4,"offset":2921},"end":{"line":63,"column":27,"offset":2944},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":2918},"end":{"line":63,"column":27,"offset":2944},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First we are going to use the analogy of flipping a coin, when we flip a coin the outcomes can either be heads or tails. Since we are in the world\nof programming its much easier to use numbers, so in this case we will be using 0 for heads and 1 for tails. in order to get a random number\nwe will use our random library so I want you to go to the top of your code and under where you imported turtle we are going to import random. It's\na really good practice to keep your imports at the top.  ","position":{"start":{"line":64,"column":1,"offset":2946},"end":{"line":67,"column":58,"offset":3441},"indent":[1,1,1]}}],"position":{"start":{"line":64,"column":1,"offset":2946},"end":{"line":67,"column":58,"offset":3441},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"once you've imported random let's use it to get a random number from 0 to 1. So in programming varaibles have a ","position":{"start":{"line":69,"column":1,"offset":3447},"end":{"line":69,"column":113,"offset":3559},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"type","position":{"start":{"line":69,"column":114,"offset":3560},"end":{"line":69,"column":118,"offset":3564},"indent":[]}}],"position":{"start":{"line":69,"column":113,"offset":3559},"end":{"line":69,"column":119,"offset":3565},"indent":[]}},{"type":"text","value":", python makes\nlife easier because you don't need to say what type you want you just make a variable name and it gives you what you want. But in other \nlanguage you need to say I want a number or I want a string (word), a number in programming is called an ","position":{"start":{"line":69,"column":119,"offset":3565},"end":{"line":71,"column":106,"offset":3824},"indent":[1,1]}},{"type":"emphasis","children":[{"type":"text","value":"integer","position":{"start":{"line":71,"column":107,"offset":3825},"end":{"line":71,"column":114,"offset":3832},"indent":[]}}],"position":{"start":{"line":71,"column":106,"offset":3824},"end":{"line":71,"column":115,"offset":3833},"indent":[]}},{"type":"text","value":" or int for short\nso since we want a random number 0 to 1 we want a random int. in the random library we use the function randint which is short for\nrandom integer, after that in the parameters for randint we need to say the range of the random number so from what number to what number, in \nthis case its from 0 to 1","position":{"start":{"line":71,"column":115,"offset":3833},"end":{"line":74,"column":26,"offset":4153},"indent":[1,1,1]}}],"position":{"start":{"line":69,"column":1,"offset":3447},"end":{"line":74,"column":26,"offset":4153},"indent":[1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"randomNumber = random.randint(0,1)","position":{"start":{"line":75,"column":1,"offset":4155},"end":{"line":77,"column":4,"offset":4199},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I just named the random number we get randomNumber, so if we want to see the randomness in action, lets make a looooong loop and print out the\nresult we get from this random number","position":{"start":{"line":78,"column":1,"offset":4201},"end":{"line":79,"column":38,"offset":4382},"indent":[1]}}],"position":{"start":{"line":78,"column":1,"offset":4201},"end":{"line":79,"column":38,"offset":4382},"indent":[1]}},{"type":"jsx","value":"<Code \ntext=\"for i in range(100000000000000):\n   randomNumber = random.randint(0,1)\n   print(randomNumber)\"\n/>","position":{"start":{"line":80,"column":1,"offset":4384},"end":{"line":84,"column":3,"offset":4498},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"so when I ran ‚¨ÜÔ∏è code I got this.","position":{"start":{"line":87,"column":1,"offset":4504},"end":{"line":87,"column":34,"offset":4537},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":4504},"end":{"line":87,"column":34,"offset":4537},"indent":[]}},{"type":"jsx","value":"<Tallpic img ={random} alt={\"random numbers\"}/>","position":{"start":{"line":89,"column":1,"offset":4541},"end":{"line":89,"column":48,"offset":4588},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"so thats good, we are getting random numbers. Now lets hook this up to the turtle. The idea behind this is when we get heads or 0 the turtle\nwill go forward and when we get tails or 1 the turtle will go backward. For now one step for the turtle will be 50 pixels (t.forward(50) but you can change it \nto whatever you please. So let's add some logic.\nthe logic all the code should look like this ","position":{"start":{"line":91,"column":1,"offset":4592},"end":{"line":94,"column":46,"offset":4990},"indent":[1,1,1]}}],"position":{"start":{"line":91,"column":1,"offset":4592},"end":{"line":94,"column":46,"offset":4990},"indent":[1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"import turtle\nimport random \n\nt= turtle.Pen()\n\nfor i in range(100000000000000):\n    randomNumber = random.randint(0,1)\n    if(randomNumber == 0):\n        t.forward(50)\n    elif(randomNumber == 1):\n        t.backward(50)","position":{"start":{"line":95,"column":1,"offset":4992},"end":{"line":107,"column":4,"offset":5231},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<img src={randomWalk} alt=\"random walk\" />","position":{"start":{"line":109,"column":1,"offset":5235},"end":{"line":109,"column":43,"offset":5277},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"boom and our turtle is randomly going forward and backward, but this is not so interesting, the interesting part comes when we add and extra dimension üòà. so how may we best \nadd this dimension? Well first we are going to need a function for the turtle.","position":{"start":{"line":111,"column":1,"offset":5281},"end":{"line":112,"column":79,"offset":5535},"indent":[1]}}],"position":{"start":{"line":111,"column":1,"offset":5281},"end":{"line":112,"column":79,"offset":5535},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"#east\nt.seth(0)\n\n#north\nt.seth(90)\n\n#west\nt.seth(180)\n\n#south\nt.seth(270)","position":{"start":{"line":114,"column":1,"offset":5539},"end":{"line":126,"column":4,"offset":5632},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"so these functions allow the turtle to turn in all these different directions, seth is short for setheading (set where the turtle is facing). These numbers are going to be\nthe core of our random walk.","position":{"start":{"line":128,"column":1,"offset":5636},"end":{"line":129,"column":29,"offset":5837},"indent":[1]}}],"position":{"start":{"line":128,"column":1,"offset":5636},"end":{"line":129,"column":29,"offset":5837},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"so since we added 2 additional dimmensions, we will need 2 more random numbers. Let's test it again to ensure we do in fact get 2 more random numbers.","position":{"start":{"line":132,"column":1,"offset":5843},"end":{"line":132,"column":151,"offset":5993},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":5843},"end":{"line":132,"column":151,"offset":5993},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"for i in range(100000000000000):\n   randomNumber = random.randint(0,3)\n   print(randomNumber)","position":{"start":{"line":135,"column":1,"offset":5999},"end":{"line":139,"column":4,"offset":6104},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So from this we can see that we get numbres 0 - 3. Now all we need to do is extend our if statement to include these numbers","position":{"start":{"line":141,"column":1,"offset":6108},"end":{"line":141,"column":125,"offset":6232},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":6108},"end":{"line":141,"column":125,"offset":6232},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"for i in range(100000000000000):\n    randomNumber = random.randint(0,3)\n    if(randomNumber == 0):\n        t.forward(50)\n    elif(randomNumber == 1):\n        t.backward(50)\n    elif(randomNumber == 2):\n        pass\n    elif(randomNumber == 3):\n        pass","position":{"start":{"line":143,"column":1,"offset":6236},"end":{"line":154,"column":4,"offset":6511},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"so the pass keyword is just so that it skips over what happens if the code ends up in that if statement, we will fill it out in just a bit. first we want to always make\nthe turtle go forward no mater which condition the turtle ends up.","position":{"start":{"line":156,"column":1,"offset":6515},"end":{"line":157,"column":67,"offset":6751},"indent":[1]}}],"position":{"start":{"line":156,"column":1,"offset":6515},"end":{"line":157,"column":67,"offset":6751},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"for i in range(100000000000000):\n    randomNumber = random.randint(0,3)\n    if(randomNumber == 0):\n        pass\n    elif(randomNumber == 1):\n        pass\n    elif(randomNumber == 2):\n        pass\n    elif(randomNumber == 3):\n        pass\n    t.forward(50)","position":{"start":{"line":160,"column":1,"offset":6757},"end":{"line":172,"column":4,"offset":7032},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"and lastly, we just input the different t.seth() in the 4 conditions.","position":{"start":{"line":174,"column":1,"offset":7036},"end":{"line":174,"column":70,"offset":7105},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":7036},"end":{"line":174,"column":70,"offset":7105},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"import turtle\nimport random \n\nt= turtle.Pen()\n\nfor i in range(100000000000000):\n    randomNumber = random.randint(0,3)\n    if(randomNumber == 0):\n        #east\n        t.seth(0)\n    elif(randomNumber == 1):\n        #north\n        t.seth(90)\n    elif(randomNumber == 2):\n       #west\n        t.seth(180) \n    elif(randomNumber == 3):\n       #south\n        t.seth(270) \n    t.forward(50)","position":{"start":{"line":176,"column":1,"offset":7109},"end":{"line":197,"column":4,"offset":7523},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Voila your random walk should be fully functional in all 4 directions!","position":{"start":{"line":199,"column":1,"offset":7527},"end":{"line":199,"column":71,"offset":7597},"indent":[]}}],"position":{"start":{"line":199,"column":1,"offset":7527},"end":{"line":199,"column":71,"offset":7597},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adjustments","position":{"start":{"line":202,"column":4,"offset":7606},"end":{"line":202,"column":15,"offset":7617},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":7603},"end":{"line":202,"column":16,"offset":7618},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So we did great and you can just stop here if you want, but if you'd like to make it a bit better lets add some adjustments. ","position":{"start":{"line":204,"column":1,"offset":7622},"end":{"line":204,"column":126,"offset":7747},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":7622},"end":{"line":204,"column":126,"offset":7747},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"firstly, the turtle is going pretty slow, theres a simple function we can put after we initialize our turtle that will speed it up significantly.","position":{"start":{"line":206,"column":1,"offset":7751},"end":{"line":206,"column":146,"offset":7896},"indent":[]}}],"position":{"start":{"line":206,"column":1,"offset":7751},"end":{"line":206,"column":146,"offset":7896},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"t.speed(0)","position":{"start":{"line":208,"column":1,"offset":7900},"end":{"line":210,"column":4,"offset":7920},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"ahh much better next, next its best to add a step variable so that we can easly adjust how far we want each step to take the turtle. ","position":{"start":{"line":212,"column":1,"offset":7924},"end":{"line":212,"column":134,"offset":8057},"indent":[]}}],"position":{"start":{"line":212,"column":1,"offset":7924},"end":{"line":212,"column":134,"offset":8057},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"import turtle\nimport random \n\nt= turtle.Pen()\nt.speed(0)\n\nstep = 20\n\nfor i in range(100000000000000):\n    randomNumber = random.randint(0,3)\n    if(randomNumber == 0):\n        #east\n        t.seth(0)\n    elif(randomNumber == 1):\n        #north\n        t.seth(90)\n    elif(randomNumber == 2):\n       #west\n        t.seth(180) \n    elif(randomNumber == 3):\n       #south\n        t.seth(270) \n    t.forward(step)","position":{"start":{"line":215,"column":1,"offset":8063},"end":{"line":239,"column":4,"offset":8504},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"You're turn","position":{"start":{"line":242,"column":4,"offset":8513},"end":{"line":242,"column":15,"offset":8524},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":8510},"end":{"line":242,"column":15,"offset":8524},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now you might think what we've done is pretty cool or pretty boring, but this is really only the tip of the iceburg, theres so much you can do with this concept.\nyou can add additional directions, colors, circles instead of lines, and you can make cool random creations. I urge you to take this further and see what you can create.\nI really loved doing this project because it was one of the first times my programming felt alive! So please experiment on and create something unique ü§°.","position":{"start":{"line":244,"column":1,"offset":8528},"end":{"line":246,"column":155,"offset":9016},"indent":[1,1]}}],"position":{"start":{"line":244,"column":1,"offset":8528},"end":{"line":246,"column":155,"offset":9016},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"path\":\"/random-walk\",\"date\":\"12/03/2021\",\"title\":\"Random Walk using Python\",\"category\":\"Python\",\"tags\":[],\"exerpt\":\"Random Walk\",\"status\":\"üåø\"}","position":{"start":{"line":248,"column":1,"offset":9018},"end":{"line":248,"column":174,"offset":9191},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":248,"column":174,"offset":9191}}},"scopeImports":["import img1 from \"./img1.png\";","import random from \"./random.png\";","import randomWalk from \"./randomWalk.gif\";","import Tallpic from \"../../../components/blogComponents/Tallpic\";","import Code from \"../../../components/blogComponents/CodeComponent/Code.tsx\";","import * as React from 'react'"],"scopeIdentifiers":["img1","random","randomWalk","Tallpic","Code","React"],"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"path\": \"/random-walk\",\n  \"date\": \"12/03/2021\",\n  \"title\": \"Random Walk using Python\",\n  \"category\": \"Python\",\n  \"tags\": [],\n  \"exerpt\": \"Random Walk\",\n  \"status\": \"üåø\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, `Daniel Shiffman`), mdx(\"p\", null, `First and foremost I would like to say that I got the idea after reading Daniel Shifman's book `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `The Nature Of Code`), ` if you're into that kind of thing, I definitly\nwould urge you to check it out, its super interesting and your brain will be bursting with ideas of what to code gauranteed üëç. I'm writing this because in the\nbook he wrote the random walk in Processing which is a highly interactive programming language that is super fun and helps people learn and visualize and have\na lot of fun with code, but I really wanted to do it in Python so `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `here it is`)), mdx(\"h2\", null, `Let's get started`), mdx(\"p\", null, `So for this program all you'll need to have is Python, I will be using 3.9, but I'm sure 3+ should be good. We will be using 2 libraries that already come shipped\nwith python, turtle and random. So random is a library that generates random number (of course its not 100% random because it uses an algorithm but its good\nenough for now). Turtle is a really nice visual library on python that is amazing for making shapes and drawing.`), mdx(\"h2\", null, `Getting started`), mdx(\"p\", null, `Open up you favorite python IDE and create a fresh new file, at the top you will\n`, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `import turtle.`), `\nNow that we have access to the library we will\ncreate our first turtle. so for simplicity I will name it t for turtle`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `t = turtle.Pen()\n`)), mdx(\"p\", null, `so from this turtle library I'm access a function Pen() that will create our turtle so that we can start drawing. So this Pen function can actually take parameters,\nyou can change the shap to a turtle by doing`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `t = turtle.Pen(shape=\"turtle\")\n`)), mdx(\"p\", null, `or if you don't want any shape you can put`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `t = turtle.Pen(visible=False)\n`)), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `Reminder capitilization is very important in code so make sure True has capital T and Pen has capital P`)), mdx(\"p\", null, `alrighty so after you make your turtle variable when you now run the program a new window will pop up titled Python Turtle Graphics and there should be a shape unless\nyou put visible = to False`), mdx(\"img\", {\n    src: img1,\n    alt: \"turtle varaible\"\n  }), mdx(\"p\", null, `cool once you see that screen you can start playing around with your turtle, so let's start by making it move. So when we want to\ninteract with our turtle we use the variable we created, in this case it t, so if I want t to move, I must give a `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `direction`), ` and\na `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `distance`), `. `), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `t.forward(100)\n`)), mdx(\"p\", null, `in this case the direction is forward and the distance is 100 pixels`), mdx(\"p\", null, `after writing this when you run the program again you should see your little turtle pen draw a line, in my case 100 pixels long.`, mdx(\"br\", {\n    parentName: \"p\"\n  }), `\n`, `Nice now that we got the technicalities out of the way, let's refer back to the random walk, which is our goal.  `), mdx(\"h2\", null, `Getting a Random Number`), mdx(\"p\", null, `First we are going to use the analogy of flipping a coin, when we flip a coin the outcomes can either be heads or tails. Since we are in the world\nof programming its much easier to use numbers, so in this case we will be using 0 for heads and 1 for tails. in order to get a random number\nwe will use our random library so I want you to go to the top of your code and under where you imported turtle we are going to import random. It's\na really good practice to keep your imports at the top.  `), mdx(\"p\", null, `once you've imported random let's use it to get a random number from 0 to 1. So in programming varaibles have a `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `type`), `, python makes\nlife easier because you don't need to say what type you want you just make a variable name and it gives you what you want. But in other\nlanguage you need to say I want a number or I want a string (word), a number in programming is called an `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `integer`), ` or int for short\nso since we want a random number 0 to 1 we want a random int. in the random library we use the function randint which is short for\nrandom integer, after that in the parameters for randint we need to say the range of the random number so from what number to what number, in\nthis case its from 0 to 1`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `randomNumber = random.randint(0,1)\n`)), mdx(\"p\", null, `I just named the random number we get randomNumber, so if we want to see the randomness in action, lets make a looooong loop and print out the\nresult we get from this random number`), mdx(Code, {\n    text: \"for i in range(100000000000000): randomNumber = random.randint(0,1) print(randomNumber)\",\n    mdxType: \"Code\"\n  }), mdx(\"p\", null, `so when I ran ‚¨ÜÔ∏è code I got this.`), mdx(Tallpic, {\n    img: random,\n    alt: \"random numbers\",\n    mdxType: \"Tallpic\"\n  }), mdx(\"p\", null, `so thats good, we are getting random numbers. Now lets hook this up to the turtle. The idea behind this is when we get heads or 0 the turtle\nwill go forward and when we get tails or 1 the turtle will go backward. For now one step for the turtle will be 50 pixels (t.forward(50) but you can change it\nto whatever you please. So let's add some logic.\nthe logic all the code should look like this `), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import turtle\nimport random \n\nt= turtle.Pen()\n\nfor i in range(100000000000000):\n    randomNumber = random.randint(0,1)\n    if(randomNumber == 0):\n        t.forward(50)\n    elif(randomNumber == 1):\n        t.backward(50)\n`)), mdx(\"img\", {\n    src: randomWalk,\n    alt: \"random walk\"\n  }), mdx(\"p\", null, `boom and our turtle is randomly going forward and backward, but this is not so interesting, the interesting part comes when we add and extra dimension üòà. so how may we best\nadd this dimension? Well first we are going to need a function for the turtle.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `#east\nt.seth(0)\n\n#north\nt.seth(90)\n\n#west\nt.seth(180)\n\n#south\nt.seth(270)\n`)), mdx(\"p\", null, `so these functions allow the turtle to turn in all these different directions, seth is short for setheading (set where the turtle is facing). These numbers are going to be\nthe core of our random walk.`), mdx(\"p\", null, `so since we added 2 additional dimmensions, we will need 2 more random numbers. Let's test it again to ensure we do in fact get 2 more random numbers.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `for i in range(100000000000000):\n   randomNumber = random.randint(0,3)\n   print(randomNumber)\n`)), mdx(\"p\", null, `So from this we can see that we get numbres 0 - 3. Now all we need to do is extend our if statement to include these numbers`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `for i in range(100000000000000):\n    randomNumber = random.randint(0,3)\n    if(randomNumber == 0):\n        t.forward(50)\n    elif(randomNumber == 1):\n        t.backward(50)\n    elif(randomNumber == 2):\n        pass\n    elif(randomNumber == 3):\n        pass\n`)), mdx(\"p\", null, `so the pass keyword is just so that it skips over what happens if the code ends up in that if statement, we will fill it out in just a bit. first we want to always make\nthe turtle go forward no mater which condition the turtle ends up.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `for i in range(100000000000000):\n    randomNumber = random.randint(0,3)\n    if(randomNumber == 0):\n        pass\n    elif(randomNumber == 1):\n        pass\n    elif(randomNumber == 2):\n        pass\n    elif(randomNumber == 3):\n        pass\n    t.forward(50)\n`)), mdx(\"p\", null, `and lastly, we just input the different t.seth() in the 4 conditions.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import turtle\nimport random \n\nt= turtle.Pen()\n\nfor i in range(100000000000000):\n    randomNumber = random.randint(0,3)\n    if(randomNumber == 0):\n        #east\n        t.seth(0)\n    elif(randomNumber == 1):\n        #north\n        t.seth(90)\n    elif(randomNumber == 2):\n       #west\n        t.seth(180) \n    elif(randomNumber == 3):\n       #south\n        t.seth(270) \n    t.forward(50)\n`)), mdx(\"p\", null, `Voila your random walk should be fully functional in all 4 directions!`), mdx(\"h2\", null, `Adjustments`), mdx(\"p\", null, `So we did great and you can just stop here if you want, but if you'd like to make it a bit better lets add some adjustments. `), mdx(\"p\", null, `firstly, the turtle is going pretty slow, theres a simple function we can put after we initialize our turtle that will speed it up significantly.`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `t.speed(0)\n`)), mdx(\"p\", null, `ahh much better next, next its best to add a step variable so that we can easly adjust how far we want each step to take the turtle. `), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `import turtle\nimport random \n\nt= turtle.Pen()\nt.speed(0)\n\nstep = 20\n\nfor i in range(100000000000000):\n    randomNumber = random.randint(0,3)\n    if(randomNumber == 0):\n        #east\n        t.seth(0)\n    elif(randomNumber == 1):\n        #north\n        t.seth(90)\n    elif(randomNumber == 2):\n       #west\n        t.seth(180) \n    elif(randomNumber == 3):\n       #south\n        t.seth(270) \n    t.forward(step)\n`)), mdx(\"h2\", null, `You're turn`), mdx(\"p\", null, `Now you might think what we've done is pretty cool or pretty boring, but this is really only the tip of the iceburg, theres so much you can do with this concept.\nyou can add additional directions, colors, circles instead of lines, and you can make cool random creations. I urge you to take this further and see what you can create.\nI really loved doing this project because it was one of the first times my programming felt alive! So please experiment on and create something unique ü§°.`));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport img1 from \"./img1.png\";\nimport random from \"./random.png\";\nimport randomWalk from \"./randomWalk.gif\";\nimport Tallpic from \"../../../components/blogComponents/Tallpic\";\nimport Code from \"../../../components/blogComponents/CodeComponent/Code.tsx\";\nexport const _frontmatter = {\n  \"path\": \"/random-walk\",\n  \"date\": \"12/03/2021\",\n  \"title\": \"Random Walk using Python\",\n  \"category\": \"Python\",\n  \"tags\": [],\n  \"exerpt\": \"Random Walk\",\n  \"status\": \"üåø\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Daniel Shiffman`}</h2>\n    <p>{`First and foremost I would like to say that I got the idea after reading Daniel Shifman's book `}<em parentName=\"p\">{`The Nature Of Code`}</em>{` if you're into that kind of thing, I definitly\nwould urge you to check it out, its super interesting and your brain will be bursting with ideas of what to code gauranteed üëç. I'm writing this because in the\nbook he wrote the random walk in Processing which is a highly interactive programming language that is super fun and helps people learn and visualize and have\na lot of fun with code, but I really wanted to do it in Python so `}<em parentName=\"p\">{`here it is`}</em></p>\n    <h2>{`Let's get started`}</h2>\n    <p>{`So for this program all you'll need to have is Python, I will be using 3.9, but I'm sure 3+ should be good. We will be using 2 libraries that already come shipped\nwith python, turtle and random. So random is a library that generates random number (of course its not 100% random because it uses an algorithm but its good\nenough for now). Turtle is a really nice visual library on python that is amazing for making shapes and drawing.`}</p>\n    <h2>{`Getting started`}</h2>\n    <p>{`Open up you favorite python IDE and create a fresh new file, at the top you will\n`}<inlineCode parentName=\"p\">{`import turtle.`}</inlineCode>{`\nNow that we have access to the library we will\ncreate our first turtle. so for simplicity I will name it t for turtle`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`t = turtle.Pen()\n`}</code></pre>\n    <p>{`so from this turtle library I'm access a function Pen() that will create our turtle so that we can start drawing. So this Pen function can actually take parameters,\nyou can change the shap to a turtle by doing`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`t = turtle.Pen(shape=\"turtle\")\n`}</code></pre>\n    <p>{`or if you don't want any shape you can put`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`t = turtle.Pen(visible=False)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Reminder capitilization is very important in code so make sure True has capital T and Pen has capital P`}</strong></p>\n    <p>{`alrighty so after you make your turtle variable when you now run the program a new window will pop up titled Python Turtle Graphics and there should be a shape unless\nyou put visible = to False`}</p>\n    <img src={img1} alt=\"turtle varaible\" />  \n    <p>{`cool once you see that screen you can start playing around with your turtle, so let's start by making it move. So when we want to\ninteract with our turtle we use the variable we created, in this case it t, so if I want t to move, I must give a `}<em parentName=\"p\">{`direction`}</em>{` and\na `}<em parentName=\"p\">{`distance`}</em>{`. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`t.forward(100)\n`}</code></pre>\n    <p>{`in this case the direction is forward and the distance is 100 pixels`}</p>\n    <p>{`after writing this when you run the program again you should see your little turtle pen draw a line, in my case 100 pixels long.`}<br parentName=\"p\"></br>{`\n`}{`Nice now that we got the technicalities out of the way, let's refer back to the random walk, which is our goal.  `}</p>\n    <h2>{`Getting a Random Number`}</h2>\n    <p>{`First we are going to use the analogy of flipping a coin, when we flip a coin the outcomes can either be heads or tails. Since we are in the world\nof programming its much easier to use numbers, so in this case we will be using 0 for heads and 1 for tails. in order to get a random number\nwe will use our random library so I want you to go to the top of your code and under where you imported turtle we are going to import random. It's\na really good practice to keep your imports at the top.  `}</p>\n    <p>{`once you've imported random let's use it to get a random number from 0 to 1. So in programming varaibles have a `}<em parentName=\"p\">{`type`}</em>{`, python makes\nlife easier because you don't need to say what type you want you just make a variable name and it gives you what you want. But in other\nlanguage you need to say I want a number or I want a string (word), a number in programming is called an `}<em parentName=\"p\">{`integer`}</em>{` or int for short\nso since we want a random number 0 to 1 we want a random int. in the random library we use the function randint which is short for\nrandom integer, after that in the parameters for randint we need to say the range of the random number so from what number to what number, in\nthis case its from 0 to 1`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`randomNumber = random.randint(0,1)\n`}</code></pre>\n    <p>{`I just named the random number we get randomNumber, so if we want to see the randomness in action, lets make a looooong loop and print out the\nresult we get from this random number`}</p>\n    <Code text=\"for i in range(100000000000000):\n   randomNumber = random.randint(0,1)\n   print(randomNumber)\" mdxType=\"Code\" />\n    <p>{`so when I ran ‚¨ÜÔ∏è code I got this.`}</p>\n    <Tallpic img={random} alt={\"random numbers\"} mdxType=\"Tallpic\" />\n    <p>{`so thats good, we are getting random numbers. Now lets hook this up to the turtle. The idea behind this is when we get heads or 0 the turtle\nwill go forward and when we get tails or 1 the turtle will go backward. For now one step for the turtle will be 50 pixels (t.forward(50) but you can change it\nto whatever you please. So let's add some logic.\nthe logic all the code should look like this `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import turtle\nimport random \n\nt= turtle.Pen()\n\nfor i in range(100000000000000):\n    randomNumber = random.randint(0,1)\n    if(randomNumber == 0):\n        t.forward(50)\n    elif(randomNumber == 1):\n        t.backward(50)\n`}</code></pre>\n    <img src={randomWalk} alt=\"random walk\" />\n    <p>{`boom and our turtle is randomly going forward and backward, but this is not so interesting, the interesting part comes when we add and extra dimension üòà. so how may we best\nadd this dimension? Well first we are going to need a function for the turtle.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`#east\nt.seth(0)\n\n#north\nt.seth(90)\n\n#west\nt.seth(180)\n\n#south\nt.seth(270)\n`}</code></pre>\n    <p>{`so these functions allow the turtle to turn in all these different directions, seth is short for setheading (set where the turtle is facing). These numbers are going to be\nthe core of our random walk.`}</p>\n    <p>{`so since we added 2 additional dimmensions, we will need 2 more random numbers. Let's test it again to ensure we do in fact get 2 more random numbers.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`for i in range(100000000000000):\n   randomNumber = random.randint(0,3)\n   print(randomNumber)\n`}</code></pre>\n    <p>{`So from this we can see that we get numbres 0 - 3. Now all we need to do is extend our if statement to include these numbers`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`for i in range(100000000000000):\n    randomNumber = random.randint(0,3)\n    if(randomNumber == 0):\n        t.forward(50)\n    elif(randomNumber == 1):\n        t.backward(50)\n    elif(randomNumber == 2):\n        pass\n    elif(randomNumber == 3):\n        pass\n`}</code></pre>\n    <p>{`so the pass keyword is just so that it skips over what happens if the code ends up in that if statement, we will fill it out in just a bit. first we want to always make\nthe turtle go forward no mater which condition the turtle ends up.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`for i in range(100000000000000):\n    randomNumber = random.randint(0,3)\n    if(randomNumber == 0):\n        pass\n    elif(randomNumber == 1):\n        pass\n    elif(randomNumber == 2):\n        pass\n    elif(randomNumber == 3):\n        pass\n    t.forward(50)\n`}</code></pre>\n    <p>{`and lastly, we just input the different t.seth() in the 4 conditions.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import turtle\nimport random \n\nt= turtle.Pen()\n\nfor i in range(100000000000000):\n    randomNumber = random.randint(0,3)\n    if(randomNumber == 0):\n        #east\n        t.seth(0)\n    elif(randomNumber == 1):\n        #north\n        t.seth(90)\n    elif(randomNumber == 2):\n       #west\n        t.seth(180) \n    elif(randomNumber == 3):\n       #south\n        t.seth(270) \n    t.forward(50)\n`}</code></pre>\n    <p>{`Voila your random walk should be fully functional in all 4 directions!`}</p>\n    <h2>{`Adjustments`}</h2>\n    <p>{`So we did great and you can just stop here if you want, but if you'd like to make it a bit better lets add some adjustments. `}</p>\n    <p>{`firstly, the turtle is going pretty slow, theres a simple function we can put after we initialize our turtle that will speed it up significantly.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`t.speed(0)\n`}</code></pre>\n    <p>{`ahh much better next, next its best to add a step variable so that we can easly adjust how far we want each step to take the turtle. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import turtle\nimport random \n\nt= turtle.Pen()\nt.speed(0)\n\nstep = 20\n\nfor i in range(100000000000000):\n    randomNumber = random.randint(0,3)\n    if(randomNumber == 0):\n        #east\n        t.seth(0)\n    elif(randomNumber == 1):\n        #north\n        t.seth(90)\n    elif(randomNumber == 2):\n       #west\n        t.seth(180) \n    elif(randomNumber == 3):\n       #south\n        t.seth(270) \n    t.forward(step)\n`}</code></pre>\n    <h2>{`You're turn`}</h2>\n    <p>{`Now you might think what we've done is pretty cool or pretty boring, but this is really only the tip of the iceburg, theres so much you can do with this concept.\nyou can add additional directions, colors, circles instead of lines, and you can make cool random creations. I urge you to take this further and see what you can create.\nI really loved doing this project because it was one of the first times my programming felt alive! So please experiment on and create something unique ü§°.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}