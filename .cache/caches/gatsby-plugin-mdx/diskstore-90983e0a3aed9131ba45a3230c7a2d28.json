{"expireTime":9007200910296486000,"key":"gatsby-plugin-mdx-entire-payload-1e0d46f94556efa573a958b027904454-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import model from \"./model.jpg\"\nimport ice from \"./iceberg.png\"\nimport compare from \"./compare.png\"\nimport SideNote from \"../../../components/blogComponents/SideNote/SideNote.tsx\";\nimport MediumPic from \"../../../components/blogComponents/Pictures/MediumPic\";","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":79,"offset":263},"indent":[1,1,1,1]}},{"type":"jsx","value":"<MediumPic img={ice} size={500} alt=\"code\" subheading=\"the Game Dev Iceberg\"/>  ","position":{"start":{"line":12,"column":1,"offset":277},"end":{"line":12,"column":81,"offset":357},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"My Programming Experience Before Unity","position":{"start":{"line":14,"column":5,"offset":365},"end":{"line":14,"column":43,"offset":403},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":361},"end":{"line":14,"column":43,"offset":403},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A bit of context to my programming experience, I haven't had too much experience with statically typed languages, I used mostly javascript and python, though I had one class in University on Java. ","position":{"start":{"line":16,"column":1,"offset":407},"end":{"line":16,"column":198,"offset":604},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":407},"end":{"line":16,"column":198,"offset":604},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It was a tough decision to decide which route to take to build my 2d game. Godot was really rising in popularity, but I ended up going with Unity due to familiarity and the strong user base. I was also hesitant with how much could get done with a \ndynamic language like Godot, unity being written with C# meant that it was static, and in my understanding, static languages can handle bigger loads of information more efficiently.","position":{"start":{"line":19,"column":1,"offset":610},"end":{"line":20,"column":182,"offset":1040},"indent":[1]}}],"position":{"start":{"line":19,"column":1,"offset":610},"end":{"line":20,"column":182,"offset":1040},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Through the 8 months of using unity at the time of writting this article, there are some new concepts I've learned and I've seen becoming important with Unity, and OOP.","position":{"start":{"line":22,"column":1,"offset":1044},"end":{"line":22,"column":169,"offset":1212},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1044},"end":{"line":22,"column":169,"offset":1212},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Important Unity / C# / OOP Concepts","position":{"start":{"line":25,"column":5,"offset":1222},"end":{"line":25,"column":40,"offset":1257},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1218},"end":{"line":25,"column":40,"offset":1257},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Monobehavior - Unity","position":{"start":{"line":27,"column":5,"offset":1265},"end":{"line":27,"column":25,"offset":1285},"indent":[]}}],"position":{"start":{"line":27,"column":5,"offset":1265},"end":{"line":27,"column":25,"offset":1285},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1261},"end":{"line":27,"column":25,"offset":1285},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Singleton design pattern - OOP","position":{"start":{"line":28,"column":5,"offset":1291},"end":{"line":28,"column":35,"offset":1321},"indent":[]}}],"position":{"start":{"line":28,"column":5,"offset":1291},"end":{"line":28,"column":35,"offset":1321},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1287},"end":{"line":28,"column":35,"offset":1321},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"State Machines - Unity","position":{"start":{"line":29,"column":5,"offset":1327},"end":{"line":29,"column":27,"offset":1349},"indent":[]}}],"position":{"start":{"line":29,"column":5,"offset":1327},"end":{"line":29,"column":27,"offset":1349},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1323},"end":{"line":29,"column":27,"offset":1349},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Delegate - C#","position":{"start":{"line":30,"column":5,"offset":1355},"end":{"line":30,"column":18,"offset":1368},"indent":[]}}],"position":{"start":{"line":30,"column":5,"offset":1355},"end":{"line":30,"column":18,"offset":1368},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1351},"end":{"line":30,"column":18,"offset":1368},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Event System - Unity","position":{"start":{"line":31,"column":5,"offset":1374},"end":{"line":31,"column":25,"offset":1394},"indent":[]}}],"position":{"start":{"line":31,"column":5,"offset":1374},"end":{"line":31,"column":25,"offset":1394},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1370},"end":{"line":31,"column":25,"offset":1394},"indent":[]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Scriptable Objects - Unity","position":{"start":{"line":32,"column":5,"offset":1400},"end":{"line":32,"column":31,"offset":1426},"indent":[]}}],"position":{"start":{"line":32,"column":5,"offset":1400},"end":{"line":32,"column":31,"offset":1426},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"1 - Monobehavior ","position":{"start":{"line":34,"column":2,"offset":1431},"end":{"line":34,"column":19,"offset":1448},"indent":[]}}],"position":{"start":{"line":34,"column":2,"offset":1431},"end":{"line":34,"column":19,"offset":1448},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1396},"end":{"line":34,"column":19,"offset":1448},"indent":[1,1]}}],"position":{"start":{"line":27,"column":1,"offset":1261},"end":{"line":34,"column":19,"offset":1448},"indent":[1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":35,"column":1,"offset":1450},"end":{"line":35,"column":4,"offset":1453},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Honestly I never thought about how important it was to take a dive into Monobehavior until writing this article. Monohevaior is \nwhat ","position":{"start":{"line":36,"column":1,"offset":1455},"end":{"line":37,"column":6,"offset":1590},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"most","position":{"start":{"line":37,"column":8,"offset":1592},"end":{"line":37,"column":12,"offset":1596},"indent":[]}}],"position":{"start":{"line":37,"column":6,"offset":1590},"end":{"line":37,"column":14,"offset":1598},"indent":[]}},{"type":"text","value":" of your scripts will inherit from. ","position":{"start":{"line":37,"column":14,"offset":1598},"end":{"line":37,"column":50,"offset":1634},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1455},"end":{"line":37,"column":50,"offset":1634},"indent":[1]}},{"type":"jsx","value":"<SideNote title=\"Inheritance\" text=\"Inheritance is an object oriented concept. Inheritance are  abilities you recieve, its like when you play an RPG and you get the wizard class, you inherit certian abilities from that class. \" />","position":{"start":{"line":39,"column":1,"offset":1638},"end":{"line":39,"column":231,"offset":1868},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When I looked into the Monobehavior I notice some Methods I had no idea that existed and could be very useful, for instance, \nOnMouseDrag, OnMouseDown, and OnMouseEnter, these methods can help when dealing with input from the mouse to develop some really intricate\nsystems.","position":{"start":{"line":41,"column":1,"offset":1872},"end":{"line":43,"column":9,"offset":2147},"indent":[1,1]}}],"position":{"start":{"line":41,"column":1,"offset":1872},"end":{"line":43,"column":9,"offset":2147},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"take some time to look at more of the methods that come with Monobehavior ","position":{"start":{"line":45,"column":1,"offset":2151},"end":{"line":45,"column":75,"offset":2225},"indent":[]}},{"type":"link","title":null,"url":"https://docs.unity3d.com/ScriptReference/MonoBehaviour.html","children":[{"type":"text","value":"here","position":{"start":{"line":45,"column":76,"offset":2226},"end":{"line":45,"column":80,"offset":2230},"indent":[]}}],"position":{"start":{"line":45,"column":75,"offset":2225},"end":{"line":45,"column":142,"offset":2292},"indent":[]}},{"type":"text","value":", it will help you undertstand why its important and the full power your scripts that inherit from Monobehavior have. ","position":{"start":{"line":45,"column":142,"offset":2292},"end":{"line":45,"column":260,"offset":2410},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2151},"end":{"line":45,"column":260,"offset":2410},"indent":[]}},{"type":"jsx","value":"<SideNote title =\"Coroutines\" text=\"The MonoBehaviour class allows you to start, stop, and manage Coroutines. Coroutines are so important when you need to delay an action in code, lets say after you eliminate an enemy with you're trusty sword, you want to wait till the death animation plays out to destroy the gameObject, you can fire up a coroutine function to wait around 5 seconds until it destroys that game object.\" />","position":{"start":{"line":47,"column":1,"offset":2414},"end":{"line":47,"column":425,"offset":2838},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"2 - Singleton Design Pattern","position":{"start":{"line":50,"column":1,"offset":2844},"end":{"line":50,"column":29,"offset":2872},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2844},"end":{"line":51,"column":4,"offset":2877},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"now this is a concept that comes when you start diving into OOP deeper. If you're a beginner programmer, it might not be the best time to \nunderstand this concept, but continue reading to see whats ahead of the horizon. A singleton is a ","position":{"start":{"line":52,"column":1,"offset":2879},"end":{"line":53,"column":99,"offset":3117},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"Design Pattern","position":{"start":{"line":53,"column":101,"offset":3119},"end":{"line":53,"column":115,"offset":3133},"indent":[]}}],"position":{"start":{"line":53,"column":99,"offset":3117},"end":{"line":53,"column":117,"offset":3135},"indent":[]}},{"type":"text","value":". What is a design pattern \nyou may ask? ","position":{"start":{"line":53,"column":117,"offset":3135},"end":{"line":54,"column":14,"offset":3177},"indent":[1]}}],"position":{"start":{"line":52,"column":1,"offset":2879},"end":{"line":54,"column":14,"offset":3177},"indent":[1,1]}},{"type":"jsx","value":"<SideNote title=\"Design Pattern\" text=\"a description or template for how to solve a problem that can be used in many different situations.Think of it \nthis way, if you're programming somehing, chances are many other people have built that same thing you're\nbuiding, and many people have faced the same problem as you. Because programmers have to build the same parts so often, there are some parts that \nhave been tested and perfected and they are the best solution to the problem. Like a cookie cutter of a gingerbread man is the best way to make a gingerbread man cookie, a Desgin pattern for solving x problem is the best way to solve x\" />","position":{"start":{"line":56,"column":1,"offset":3181},"end":{"line":59,"column":240,"offset":3827},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":" For example, the Singleton design pattern is the ","position":{"start":{"line":62,"column":1,"offset":3833},"end":{"line":62,"column":51,"offset":3883},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"best","position":{"start":{"line":62,"column":52,"offset":3884},"end":{"line":62,"column":56,"offset":3888},"indent":[]}}],"position":{"start":{"line":62,"column":51,"offset":3883},"end":{"line":62,"column":57,"offset":3889},"indent":[]}},{"type":"text","value":" way to implement something that should only have ","position":{"start":{"line":62,"column":57,"offset":3889},"end":{"line":62,"column":107,"offset":3939},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"one","position":{"start":{"line":62,"column":108,"offset":3940},"end":{"line":62,"column":111,"offset":3943},"indent":[]}}],"position":{"start":{"line":62,"column":107,"offset":3939},"end":{"line":62,"column":112,"offset":3944},"indent":[]}},{"type":"text","value":" instance.  For instance in my game, there is only ","position":{"start":{"line":62,"column":112,"offset":3944},"end":{"line":62,"column":163,"offset":3995},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"one","position":{"start":{"line":62,"column":164,"offset":3996},"end":{"line":62,"column":167,"offset":3999},"indent":[]}}],"position":{"start":{"line":62,"column":163,"offset":3995},"end":{"line":62,"column":168,"offset":4000},"indent":[]}},{"type":"text","value":" \nskillbook. And how the code works is that it only instantiates the class once. The code for a singleton makes it very safe, because if we \naccidently instantiate two instances and update 1 and then read the other, you can see how this can get very messy. ","position":{"start":{"line":62,"column":168,"offset":4000},"end":{"line":64,"column":117,"offset":4259},"indent":[1,1]}}],"position":{"start":{"line":62,"column":1,"offset":3833},"end":{"line":64,"column":117,"offset":4259},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Its very simple to lookup singleton demonstrations all over the web so I'll leave it to you, just some important features I want to highlight is the fact that the instance variable inside of the singleton is ","position":{"start":{"line":66,"column":1,"offset":4263},"end":{"line":66,"column":209,"offset":4471},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"static","position":{"start":{"line":66,"column":211,"offset":4473},"end":{"line":66,"column":217,"offset":4479},"indent":[]}}],"position":{"start":{"line":66,"column":209,"offset":4471},"end":{"line":66,"column":219,"offset":4481},"indent":[]}},{"type":"text","value":" this is important because it can be easily accessed all throughout \nyour code, and you know you're accessing the correct class because there is only instance of it.","position":{"start":{"line":66,"column":219,"offset":4481},"end":{"line":67,"column":97,"offset":4647},"indent":[1]}}],"position":{"start":{"line":66,"column":1,"offset":4263},"end":{"line":67,"column":97,"offset":4647},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"3 - State Machines","position":{"start":{"line":69,"column":1,"offset":4651},"end":{"line":69,"column":19,"offset":4669},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":4651},"end":{"line":70,"column":4,"offset":4674},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"I've been unexcusably hesitant to try out Unity State Machines. I finally threw in the towel\nand got cracking on it when I was programming the AI for an enemy in my game.","position":{"start":{"line":71,"column":1,"offset":4676},"end":{"line":72,"column":78,"offset":4847},"indent":[1]}}],"position":{"start":{"line":71,"column":1,"offset":4676},"end":{"line":72,"column":78,"offset":4847},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The first thing I realized was that you create State Machine Scripts differently from normal scripts\nin unity. In order to create State Machine (SM) scripts you must open the animator tab, and click on \nan animation, then in the inspector window click ","position":{"start":{"line":74,"column":1,"offset":4851},"end":{"line":76,"column":50,"offset":5105},"indent":[1,1]}},{"type":"linkReference","identifier":"add behavior","label":"Add Behavior","referenceType":"shortcut","children":[{"type":"text","value":"Add Behavior","position":{"start":{"line":76,"column":51,"offset":5106},"end":{"line":76,"column":63,"offset":5118},"indent":[]}}],"position":{"start":{"line":76,"column":50,"offset":5105},"end":{"line":76,"column":64,"offset":5119},"indent":[]}},{"type":"text","value":" once you open up the created script\nyou'll realize that the script no longer inherits from MonoBehavior but from StateMachineBehaviour. There should be some commented out functions:  OnStateEnter(), \nOnStateUpdate(), OnStateExit(), OnStateMove() and OnStateIK().\nFor now the first 3 are the most important and are pretty self explanatory. \nThe first ","position":{"start":{"line":76,"column":64,"offset":5119},"end":{"line":80,"column":11,"offset":5474},"indent":[1,1,1,1]}},{"type":"linkReference","identifier":"onestateenter","label":"OneStateEnter","referenceType":"shortcut","children":[{"type":"text","value":"OneStateEnter","position":{"start":{"line":80,"column":12,"offset":5475},"end":{"line":80,"column":25,"offset":5488},"indent":[]}}],"position":{"start":{"line":80,"column":11,"offset":5474},"end":{"line":80,"column":26,"offset":5489},"indent":[]}},{"type":"text","value":" is called once the animation state is entered, the second ","position":{"start":{"line":80,"column":26,"offset":5489},"end":{"line":80,"column":85,"offset":5548},"indent":[]}},{"type":"linkReference","identifier":"onstateupdate","label":"OnStateUpdate","referenceType":"shortcut","children":[{"type":"text","value":"OnStateUpdate","position":{"start":{"line":80,"column":86,"offset":5549},"end":{"line":80,"column":99,"offset":5562},"indent":[]}}],"position":{"start":{"line":80,"column":85,"offset":5548},"end":{"line":80,"column":100,"offset":5563},"indent":[]}},{"type":"text","value":" is a loop that is \ncalled at each Update frame except for the first and last frame. Finally ","position":{"start":{"line":80,"column":100,"offset":5563},"end":{"line":81,"column":74,"offset":5657},"indent":[1]}},{"type":"linkReference","identifier":"onstateexit","label":"OnStateExit","referenceType":"shortcut","children":[{"type":"text","value":"OnStateExit","position":{"start":{"line":81,"column":75,"offset":5658},"end":{"line":81,"column":86,"offset":5669},"indent":[]}}],"position":{"start":{"line":81,"column":74,"offset":5657},"end":{"line":81,"column":87,"offset":5670},"indent":[]}},{"type":"text","value":" is called on the last update frame when a state machine evaluates this state.","position":{"start":{"line":81,"column":87,"offset":5670},"end":{"line":81,"column":165,"offset":5748},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":4851},"end":{"line":81,"column":165,"offset":5748},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I don't know about you but I've used way too many Coroutines and unnecessary code controlling when the state changes, and when to change using methods like,\nanimator.GetBool(\"state\") or animator.SetBool(\"state\", false) peppered throughout my code. Its nice to have a central place that controls the animation state just\nto clean up and compartmentalize things. ","position":{"start":{"line":83,"column":1,"offset":5752},"end":{"line":85,"column":42,"offset":6115},"indent":[1,1]}}],"position":{"start":{"line":83,"column":1,"offset":5752},"end":{"line":85,"column":42,"offset":6115},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Another neat thing about state machines is that in the function it already supplys you with that gameobjects animator so you don't need to fetch it in a variable. ","position":{"start":{"line":87,"column":1,"offset":6119},"end":{"line":87,"column":164,"offset":6282},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":6119},"end":{"line":87,"column":164,"offset":6282},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For my first use case, I used state machine to control the enemy in my game through 4 state, ","position":{"start":{"line":89,"column":1,"offset":6286},"end":{"line":89,"column":94,"offset":6379},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":6286},"end":{"line":89,"column":94,"offset":6379},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Patrolling State - When the enemy chooses a random location and walks to that random position.","position":{"start":{"line":91,"column":4,"offset":6386},"end":{"line":91,"column":98,"offset":6480},"indent":[]}}],"position":{"start":{"line":91,"column":4,"offset":6386},"end":{"line":91,"column":98,"offset":6480},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":6383},"end":{"line":91,"column":98,"offset":6480},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Follow State - when the enemy detects me and starts following me.","position":{"start":{"line":92,"column":4,"offset":6485},"end":{"line":92,"column":69,"offset":6550},"indent":[]}}],"position":{"start":{"line":92,"column":4,"offset":6485},"end":{"line":92,"column":69,"offset":6550},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":6482},"end":{"line":92,"column":69,"offset":6550},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Attack State - after the enemy follows me and is within range to attack.","position":{"start":{"line":93,"column":4,"offset":6555},"end":{"line":93,"column":76,"offset":6627},"indent":[]}}],"position":{"start":{"line":93,"column":4,"offset":6555},"end":{"line":93,"column":76,"offset":6627},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":6552},"end":{"line":93,"column":76,"offset":6627},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Idle State - after the enemy gets to the patrol states random position, and it waits in that position for around 4 seconds.","position":{"start":{"line":94,"column":4,"offset":6632},"end":{"line":94,"column":127,"offset":6755},"indent":[]}}],"position":{"start":{"line":94,"column":4,"offset":6632},"end":{"line":94,"column":127,"offset":6755},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":6629},"end":{"line":94,"column":127,"offset":6755},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":6383},"end":{"line":94,"column":127,"offset":6755},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"4 - Delegate","position":{"start":{"line":97,"column":1,"offset":6761},"end":{"line":97,"column":13,"offset":6773},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":6761},"end":{"line":98,"column":4,"offset":6778},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Delegates are actually something very ","position":{"start":{"line":99,"column":1,"offset":6780},"end":{"line":99,"column":39,"offset":6818},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"small","position":{"start":{"line":99,"column":40,"offset":6819},"end":{"line":99,"column":45,"offset":6824},"indent":[]}}],"position":{"start":{"line":99,"column":39,"offset":6818},"end":{"line":99,"column":46,"offset":6825},"indent":[]}},{"type":"text","value":" to understand, I say this because I held off learning them because the description was confusing \nto me and in tern I became intimidated, but let me try to explain it so its simple and easy to understand. You know whenever you make a new script \nand you need to declare all the variables close to the top of the script? well a delegate is a variable that holds a function, so something like:","position":{"start":{"line":99,"column":46,"offset":6825},"end":{"line":101,"column":146,"offset":7219},"indent":[1,1]}}],"position":{"start":{"line":99,"column":1,"offset":6780},"end":{"line":101,"column":146,"offset":7219},"indent":[1,1]}},{"type":"code","lang":null,"meta":null,"value":"public delegate int PerformCalculation(int x, int y);\n\nPerformCalculation add;","position":{"start":{"line":102,"column":1,"offset":7221},"end":{"line":106,"column":4,"offset":7311},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"so all we did was made a random function that accepts 2 arguments, at this point we havent ","position":{"start":{"line":107,"column":1,"offset":7313},"end":{"line":107,"column":92,"offset":7404},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"defined","position":{"start":{"line":107,"column":93,"offset":7405},"end":{"line":107,"column":100,"offset":7412},"indent":[]}}],"position":{"start":{"line":107,"column":92,"offset":7404},"end":{"line":107,"column":101,"offset":7413},"indent":[]}},{"type":"text","value":" what the function/delegate does, all we did \nwas say it needs 2 variables. Then we gave the delegate a variable name, add.","position":{"start":{"line":107,"column":101,"offset":7413},"end":{"line":108,"column":78,"offset":7537},"indent":[1]}}],"position":{"start":{"line":107,"column":1,"offset":7313},"end":{"line":108,"column":78,"offset":7537},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"so when you want to use it, you need to assign a function to this delegate:","position":{"start":{"line":110,"column":1,"offset":7541},"end":{"line":110,"column":76,"offset":7616},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":7541},"end":{"line":110,"column":76,"offset":7616},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"static bool adding(int number1, int number2)\n{\n\treturn number1 + number2;\n}\n\nadd = adding; ","position":{"start":{"line":111,"column":1,"offset":7618},"end":{"line":118,"column":4,"offset":7724},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"now our delegate add has the function value adding, we did this in 2 steps, we could have named the delegate and assigned its value in one step \nby doing this:","position":{"start":{"line":119,"column":1,"offset":7726},"end":{"line":120,"column":15,"offset":7886},"indent":[1]}}],"position":{"start":{"line":119,"column":1,"offset":7726},"end":{"line":120,"column":15,"offset":7886},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"PerformCalculation add = adding;","position":{"start":{"line":121,"column":1,"offset":7888},"end":{"line":123,"column":4,"offset":7930},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"now our add delegate becomed that function that adds 2 numbers, and in the future I can even assign our add delegate to a different function. \nnow if I wanted to use the add delegate its like this","position":{"start":{"line":124,"column":1,"offset":7932},"end":{"line":125,"column":54,"offset":8129},"indent":[1]}}],"position":{"start":{"line":124,"column":1,"offset":7932},"end":{"line":125,"column":54,"offset":8129},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"int value = add(1,2);","position":{"start":{"line":126,"column":1,"offset":8131},"end":{"line":128,"column":4,"offset":8162},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"it works the same as a normal function.\nAnd thats all there is to delegates! Its super easy and its so important in Unity and Gamedev to pass functions to different scripts, expecially when you want to separate front and backend. ","position":{"start":{"line":129,"column":1,"offset":8164},"end":{"line":130,"column":191,"offset":8395},"indent":[1]}}],"position":{"start":{"line":129,"column":1,"offset":8164},"end":{"line":130,"column":191,"offset":8395},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"5 - Event System","position":{"start":{"line":132,"column":1,"offset":8399},"end":{"line":132,"column":17,"offset":8415},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":8399},"end":{"line":133,"column":4,"offset":8420},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"This concept is very interesting. You could produce a whole game without using this, but what it does, ","position":{"start":{"line":135,"column":1,"offset":8424},"end":{"line":135,"column":104,"offset":8527},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"is it makes your code a lot better","position":{"start":{"line":135,"column":105,"offset":8528},"end":{"line":135,"column":139,"offset":8562},"indent":[]}}],"position":{"start":{"line":135,"column":104,"offset":8527},"end":{"line":135,"column":140,"offset":8563},"indent":[]}},{"type":"text","value":". The reason \nwhy you ","position":{"start":{"line":135,"column":140,"offset":8563},"end":{"line":136,"column":9,"offset":8586},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"should","position":{"start":{"line":136,"column":10,"offset":8587},"end":{"line":136,"column":16,"offset":8593},"indent":[]}}],"position":{"start":{"line":136,"column":9,"offset":8586},"end":{"line":136,"column":17,"offset":8594},"indent":[]}},{"type":"text","value":" use the Event System is because it allows you to compartmentalize logic more efficiently. Your Front-end Code should be separate from the\nbackend, with the event system you can write the backend once and have subscribers attached to it. These subscribers do not effect the backend code\nat all, the backend doesn't need to know who these subscribers are or what they're doing. For instance, I can have backend code that sets off an event when\nthe user clicks a particular key, lets say \"TAB\", when the user hits tab, the event is fired, and either no variables or some variables are passed to that event. ","position":{"start":{"line":136,"column":17,"offset":8594},"end":{"line":139,"column":163,"offset":9202},"indent":[1,1,1]}}],"position":{"start":{"line":135,"column":1,"offset":8424},"end":{"line":139,"column":163,"offset":9202},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"// Firing of event looks like this","position":{"start":{"line":141,"column":1,"offset":9206},"end":{"line":141,"column":35,"offset":9240},"indent":[]}}],"position":{"start":{"line":141,"column":1,"offset":9206},"end":{"line":141,"column":35,"offset":9240},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"if(Input.GeyKeyDown(KeyCode.Tab))\n{\n\tOnClickTab?.Invoke();   <--- Fired Event\n}","position":{"start":{"line":142,"column":1,"offset":9242},"end":{"line":147,"column":4,"offset":9334},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"<SideNote title=\"Event Naming Conventions\" text=\"When creating an event, its common practice to start with On[What the Event Reacts to], so in this case OnClickTab, but it could be many other things, OnLevelUp, OnPlayerDead, OnKillEnemy, the list goes on and on.\" />","position":{"start":{"line":149,"column":1,"offset":9338},"end":{"line":149,"column":267,"offset":9604},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I'm not going to go into the code, there's more to event than this little if statement, but before you get into that, we must understand the concept first, Events are very tricky to understand, but once you get it, you see that it was actually simple, the syntax is whats difficult to get the hang of. ","position":{"start":{"line":151,"column":1,"offset":9608},"end":{"line":151,"column":303,"offset":9910},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":9608},"end":{"line":151,"column":303,"offset":9910},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The subscribers then activate when that event is fired and you can create methods inside the script with the subscribers to perform certain methods\nwhen that event is activated.","position":{"start":{"line":154,"column":1,"offset":9916},"end":{"line":155,"column":30,"offset":10094},"indent":[1]}}],"position":{"start":{"line":154,"column":1,"offset":9916},"end":{"line":155,"column":30,"offset":10094},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Events","position":{"start":{"line":161,"column":5,"offset":10110},"end":{"line":161,"column":11,"offset":10116},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":10106},"end":{"line":161,"column":12,"offset":10117},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Some events that monobehavior has access to are as follows: ","position":{"start":{"line":162,"column":1,"offset":10119},"end":{"line":162,"column":61,"offset":10179},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":10119},"end":{"line":162,"column":61,"offset":10179},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Start- called when the GameObject begins to exist (either when the Scene is loaded, or the GameObject is instantiated).","position":{"start":{"line":164,"column":4,"offset":10186},"end":{"line":164,"column":123,"offset":10305},"indent":[]}}],"position":{"start":{"line":164,"column":4,"offset":10186},"end":{"line":164,"column":123,"offset":10305},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":10183},"end":{"line":165,"column":1,"offset":10307},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Update - called every frame.","position":{"start":{"line":166,"column":4,"offset":10312},"end":{"line":166,"column":32,"offset":10340},"indent":[]}}],"position":{"start":{"line":166,"column":4,"offset":10312},"end":{"line":166,"column":32,"offset":10340},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":10309},"end":{"line":167,"column":1,"offset":10342},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Fixed Update- called every physics timestep.","position":{"start":{"line":168,"column":4,"offset":10347},"end":{"line":168,"column":48,"offset":10391},"indent":[]}}],"position":{"start":{"line":168,"column":4,"offset":10347},"end":{"line":168,"column":48,"offset":10391},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":10344},"end":{"line":169,"column":1,"offset":10393},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"OnBecameVisible and OnBecameInvisible- called when a GameObject’s renderer enters or leaves a camera's view.","position":{"start":{"line":170,"column":4,"offset":10398},"end":{"line":170,"column":112,"offset":10506},"indent":[]}}],"position":{"start":{"line":170,"column":4,"offset":10398},"end":{"line":170,"column":112,"offset":10506},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":10395},"end":{"line":171,"column":1,"offset":10508},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"OnCollisionEnter nd OnTriggerEnter - called when physics ","position":{"start":{"line":172,"column":4,"offset":10513},"end":{"line":172,"column":61,"offset":10570},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"collisions","position":{"start":{"line":172,"column":63,"offset":10572},"end":{"line":172,"column":73,"offset":10582},"indent":[]}}],"position":{"start":{"line":172,"column":61,"offset":10570},"end":{"line":172,"column":75,"offset":10584},"indent":[]}},{"type":"text","value":" or triggers occur.","position":{"start":{"line":172,"column":75,"offset":10584},"end":{"line":172,"column":94,"offset":10603},"indent":[]}}],"position":{"start":{"line":172,"column":4,"offset":10513},"end":{"line":172,"column":94,"offset":10603},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":10510},"end":{"line":173,"column":1,"offset":10605},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"OnDestroy- called when the GameObject is destroyed.","position":{"start":{"line":174,"column":4,"offset":10610},"end":{"line":174,"column":55,"offset":10661},"indent":[]}}],"position":{"start":{"line":174,"column":4,"offset":10610},"end":{"line":174,"column":55,"offset":10661},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":10607},"end":{"line":174,"column":55,"offset":10661},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":10183},"end":{"line":174,"column":55,"offset":10661},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"6 - Scriptable Objects","position":{"start":{"line":179,"column":1,"offset":10671},"end":{"line":179,"column":23,"offset":10693},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":10671},"end":{"line":180,"column":4,"offset":10698},"indent":[1]}},{"type":"jsx","value":"<MediumPic img={compare} size={900} alt=\"difference between scriptable vs mono\" subheading=\"some methods that inherit from scriptable objects type, compared to monobehavior\" />  ","position":{"start":{"line":183,"column":1,"offset":10704},"end":{"line":183,"column":179,"offset":10882},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Scriptable Objects Vs Monobehaviors","position":{"start":{"line":187,"column":5,"offset":10894},"end":{"line":187,"column":40,"offset":10929},"indent":[]}}],"position":{"start":{"line":187,"column":1,"offset":10890},"end":{"line":187,"column":40,"offset":10929},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see the only new method you get through using Scriptable Objects is OnDestoy() and you don't have access to the game loop through functions like\nupdate and start. This is an important attribute! ","position":{"start":{"line":189,"column":1,"offset":10933},"end":{"line":190,"column":51,"offset":11140},"indent":[1]}}],"position":{"start":{"line":189,"column":1,"offset":10933},"end":{"line":190,"column":51,"offset":11140},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Scriptable objects can not be attached to components as a gameobject instead they are created as project asset files.","position":{"start":{"line":192,"column":1,"offset":11144},"end":{"line":192,"column":118,"offset":11261},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":11144},"end":{"line":192,"column":118,"offset":11261},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Monobehaviors always live on a game object, so by design their bound to an instance of a gameobject and because of that when you want to access the data for a prefab, each instance will have a copy of the transform and the gameobject which is a waste of space. ","position":{"start":{"line":194,"column":1,"offset":11265},"end":{"line":194,"column":262,"offset":11526},"indent":[]}}],"position":{"start":{"line":194,"column":1,"offset":11265},"end":{"line":194,"column":262,"offset":11526},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"moral of the story, if your prefab doesn't need access to gameobject or transform, and you want to save memory, you should use Scriptable Objects instead of Monobehaviors. If you'd like more information on this topic ","position":{"start":{"line":195,"column":3,"offset":11530},"end":{"line":195,"column":220,"offset":11747},"indent":[]}},{"type":"link","title":null,"url":"https://www.youtube.com/watch?v=PVOVIxNxxeQ","children":[{"type":"text","value":"here","position":{"start":{"line":195,"column":221,"offset":11748},"end":{"line":195,"column":225,"offset":11752},"indent":[]}}],"position":{"start":{"line":195,"column":220,"offset":11747},"end":{"line":195,"column":271,"offset":11798},"indent":[]}},{"type":"text","value":" is a video created by Unity on the topic.","position":{"start":{"line":195,"column":271,"offset":11798},"end":{"line":195,"column":313,"offset":11840},"indent":[]}}],"position":{"start":{"line":195,"column":3,"offset":11530},"end":{"line":195,"column":313,"offset":11840},"indent":[]}}],"position":{"start":{"line":195,"column":1,"offset":11528},"end":{"line":195,"column":313,"offset":11840},"indent":[]}}],"position":{"start":{"line":195,"column":1,"offset":11528},"end":{"line":195,"column":313,"offset":11840},"indent":[]}},{"type":"jsx","value":"<SideNote title=\"My Use Case\" text=\"In my game, I use scriptable objects to define each page in my skillbook. Its so great this way because that object is used among various scenes, and in the past, when the variables were attached to the script, there were differences in values because it was able to be one value in one scene and another value in another scene. Now I just edit the Scriptable Object and drag it into all the scenes.\" />","position":{"start":{"line":198,"column":1,"offset":11846},"end":{"line":198,"column":440,"offset":12285},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"path\":\"/unity-progress\",\"date\":\"28-09-2021\",\"lastUpdated\":\"16-12-2016\",\"title\":\"6 Important Things I Learned from Half a Year Using Unity \",\"category\":\"GameDev\",\"tags\":[],\"exerpt\":\"Unity\",\"status\":\"🌿\"}","position":{"start":{"line":205,"column":1,"offset":12297},"end":{"line":205,"column":233,"offset":12529},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":205,"column":233,"offset":12529}}},"scopeImports":["import model from \"./model.jpg\"","import ice from \"./iceberg.png\"","import compare from \"./compare.png\"","import SideNote from \"../../../components/blogComponents/SideNote/SideNote.tsx\";","import MediumPic from \"../../../components/blogComponents/Pictures/MediumPic\";","import * as React from 'react'"],"scopeIdentifiers":["model","ice","compare","SideNote","MediumPic","React"],"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"path\": \"/unity-progress\",\n  \"date\": \"28-09-2021\",\n  \"lastUpdated\": \"16-12-2016\",\n  \"title\": \"6 Important Things I Learned from Half a Year Using Unity \",\n  \"category\": \"GameDev\",\n  \"tags\": [],\n  \"exerpt\": \"Unity\",\n  \"status\": \"🌿\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(MediumPic, {\n    img: ice,\n    size: 500,\n    alt: \"code\",\n    subheading: \"the Game Dev Iceberg\",\n    mdxType: \"MediumPic\"\n  }), mdx(\"h3\", null, `My Programming Experience Before Unity`), mdx(\"p\", null, `A bit of context to my programming experience, I haven't had too much experience with statically typed languages, I used mostly javascript and python, though I had one class in University on Java. `), mdx(\"p\", null, `It was a tough decision to decide which route to take to build my 2d game. Godot was really rising in popularity, but I ended up going with Unity due to familiarity and the strong user base. I was also hesitant with how much could get done with a\ndynamic language like Godot, unity being written with C# meant that it was static, and in my understanding, static languages can handle bigger loads of information more efficiently.`), mdx(\"p\", null, `Through the 8 months of using unity at the time of writting this article, there are some new concepts I've learned and I've seen becoming important with Unity, and OOP.`), mdx(\"h3\", null, `Important Unity / C# / OOP Concepts`), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Monobehavior - Unity`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Singleton design pattern - OOP`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `State Machines - Unity`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Delegate - C#`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Event System - Unity`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Scriptable Objects - Unity`), mdx(\"p\", {\n    parentName: \"li\"\n  }, `1 - Monobehavior `))), mdx(\"hr\", null), mdx(\"p\", null, `Honestly I never thought about how important it was to take a dive into Monobehavior until writing this article. Monohevaior is\nwhat `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `most`), ` of your scripts will inherit from. `), mdx(SideNote, {\n    title: \"Inheritance\",\n    text: \"Inheritance is an object oriented concept. Inheritance are  abilities you recieve, its like when you play an RPG and you get the wizard class, you inherit certian abilities from that class. \",\n    mdxType: \"SideNote\"\n  }), mdx(\"p\", null, `When I looked into the Monobehavior I notice some Methods I had no idea that existed and could be very useful, for instance,\nOnMouseDrag, OnMouseDown, and OnMouseEnter, these methods can help when dealing with input from the mouse to develop some really intricate\nsystems.`), mdx(\"p\", null, `take some time to look at more of the methods that come with Monobehavior `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.unity3d.com/ScriptReference/MonoBehaviour.html\"\n  }, `here`), `, it will help you undertstand why its important and the full power your scripts that inherit from Monobehavior have. `), mdx(SideNote, {\n    title: \"Coroutines\",\n    text: \"The MonoBehaviour class allows you to start, stop, and manage Coroutines. Coroutines are so important when you need to delay an action in code, lets say after you eliminate an enemy with you're trusty sword, you want to wait till the death animation plays out to destroy the gameObject, you can fire up a coroutine function to wait around 5 seconds until it destroys that game object.\",\n    mdxType: \"SideNote\"\n  }), mdx(\"h2\", null, `2 - Singleton Design Pattern`), mdx(\"p\", null, `now this is a concept that comes when you start diving into OOP deeper. If you're a beginner programmer, it might not be the best time to\nunderstand this concept, but continue reading to see whats ahead of the horizon. A singleton is a `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `Design Pattern`), `. What is a design pattern\nyou may ask? `), mdx(SideNote, {\n    title: \"Design Pattern\",\n    text: \"a description or template for how to solve a problem that can be used in many different situations.Think of it \\nthis way, if you're programming somehing, chances are many other people have built that same thing you're\\nbuiding, and many people have faced the same problem as you. Because programmers have to build the same parts so often, there are some parts that \\nhave been tested and perfected and they are the best solution to the problem. Like a cookie cutter of a gingerbread man is the best way to make a gingerbread man cookie, a Desgin pattern for solving x problem is the best way to solve x\",\n    mdxType: \"SideNote\"\n  }), mdx(\"p\", null, ` For example, the Singleton design pattern is the `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `best`), ` way to implement something that should only have `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `one`), ` instance.  For instance in my game, there is only `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `one`), `\nskillbook. And how the code works is that it only instantiates the class once. The code for a singleton makes it very safe, because if we\naccidently instantiate two instances and update 1 and then read the other, you can see how this can get very messy. `), mdx(\"p\", null, `Its very simple to lookup singleton demonstrations all over the web so I'll leave it to you, just some important features I want to highlight is the fact that the instance variable inside of the singleton is `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `static`), ` this is important because it can be easily accessed all throughout\nyour code, and you know you're accessing the correct class because there is only instance of it.`), mdx(\"h2\", null, `3 - State Machines`), mdx(\"p\", null, `I've been unexcusably hesitant to try out Unity State Machines. I finally threw in the towel\nand got cracking on it when I was programming the AI for an enemy in my game.`), mdx(\"p\", null, `The first thing I realized was that you create State Machine Scripts differently from normal scripts\nin unity. In order to create State Machine (SM) scripts you must open the animator tab, and click on\nan animation, then in the inspector window click `, `[Add Behavior]`, ` once you open up the created script\nyou'll realize that the script no longer inherits from MonoBehavior but from StateMachineBehaviour. There should be some commented out functions:  OnStateEnter(),\nOnStateUpdate(), OnStateExit(), OnStateMove() and OnStateIK().\nFor now the first 3 are the most important and are pretty self explanatory.\nThe first `, `[OneStateEnter]`, ` is called once the animation state is entered, the second `, `[OnStateUpdate]`, ` is a loop that is\ncalled at each Update frame except for the first and last frame. Finally `, `[OnStateExit]`, ` is called on the last update frame when a state machine evaluates this state.`), mdx(\"p\", null, `I don't know about you but I've used way too many Coroutines and unnecessary code controlling when the state changes, and when to change using methods like,\nanimator.GetBool(\"state\") or animator.SetBool(\"state\", false) peppered throughout my code. Its nice to have a central place that controls the animation state just\nto clean up and compartmentalize things. `), mdx(\"p\", null, `Another neat thing about state machines is that in the function it already supplys you with that gameobjects animator so you don't need to fetch it in a variable. `), mdx(\"p\", null, `For my first use case, I used state machine to control the enemy in my game through 4 state, `), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Patrolling State - When the enemy chooses a random location and walks to that random position.`), mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Follow State - when the enemy detects me and starts following me.`), mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Attack State - after the enemy follows me and is within range to attack.`), mdx(\"li\", {\n    parentName: \"ol\"\n  }, `Idle State - after the enemy gets to the patrol states random position, and it waits in that position for around 4 seconds.`)), mdx(\"h2\", null, `4 - Delegate`), mdx(\"p\", null, `Delegates are actually something very `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `small`), ` to understand, I say this because I held off learning them because the description was confusing\nto me and in tern I became intimidated, but let me try to explain it so its simple and easy to understand. You know whenever you make a new script\nand you need to declare all the variables close to the top of the script? well a delegate is a variable that holds a function, so something like:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `public delegate int PerformCalculation(int x, int y);\n\nPerformCalculation add;\n`)), mdx(\"p\", null, `so all we did was made a random function that accepts 2 arguments, at this point we havent `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `defined`), ` what the function/delegate does, all we did\nwas say it needs 2 variables. Then we gave the delegate a variable name, add.`), mdx(\"p\", null, `so when you want to use it, you need to assign a function to this delegate:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `static bool adding(int number1, int number2)\n{\n    return number1 + number2;\n}\n\nadd = adding; \n`)), mdx(\"p\", null, `now our delegate add has the function value adding, we did this in 2 steps, we could have named the delegate and assigned its value in one step\nby doing this:`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `PerformCalculation add = adding;\n`)), mdx(\"p\", null, `now our add delegate becomed that function that adds 2 numbers, and in the future I can even assign our add delegate to a different function.\nnow if I wanted to use the add delegate its like this`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `int value = add(1,2);\n`)), mdx(\"p\", null, `it works the same as a normal function.\nAnd thats all there is to delegates! Its super easy and its so important in Unity and Gamedev to pass functions to different scripts, expecially when you want to separate front and backend. `), mdx(\"h2\", null, `5 - Event System`), mdx(\"p\", null, `This concept is very interesting. You could produce a whole game without using this, but what it does, `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `is it makes your code a lot better`), `. The reason\nwhy you `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `should`), ` use the Event System is because it allows you to compartmentalize logic more efficiently. Your Front-end Code should be separate from the\nbackend, with the event system you can write the backend once and have subscribers attached to it. These subscribers do not effect the backend code\nat all, the backend doesn't need to know who these subscribers are or what they're doing. For instance, I can have backend code that sets off an event when\nthe user clicks a particular key, lets say \"TAB\", when the user hits tab, the event is fired, and either no variables or some variables are passed to that event. `), mdx(\"p\", null, `// Firing of event looks like this`), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, `if(Input.GeyKeyDown(KeyCode.Tab))\n{\n    OnClickTab?.Invoke();   <--- Fired Event\n}\n`)), mdx(SideNote, {\n    title: \"Event Naming Conventions\",\n    text: \"When creating an event, its common practice to start with On[What the Event Reacts to], so in this case OnClickTab, but it could be many other things, OnLevelUp, OnPlayerDead, OnKillEnemy, the list goes on and on.\",\n    mdxType: \"SideNote\"\n  }), mdx(\"p\", null, `I'm not going to go into the code, there's more to event than this little if statement, but before you get into that, we must understand the concept first, Events are very tricky to understand, but once you get it, you see that it was actually simple, the syntax is whats difficult to get the hang of. `), mdx(\"p\", null, `The subscribers then activate when that event is fired and you can create methods inside the script with the subscribers to perform certain methods\nwhen that event is activated.`), mdx(\"h3\", null, `Events`), mdx(\"p\", null, `Some events that monobehavior has access to are as follows: `), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Start- called when the GameObject begins to exist (either when the Scene is loaded, or the GameObject is instantiated).`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Update - called every frame.`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `Fixed Update- called every physics timestep.`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `OnBecameVisible and OnBecameInvisible- called when a GameObject’s renderer enters or leaves a camera's view.`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `OnCollisionEnter nd OnTriggerEnter - called when physics `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `collisions`), ` or triggers occur.`)), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, `OnDestroy- called when the GameObject is destroyed.`))), mdx(\"h2\", null, `6 - Scriptable Objects`), mdx(MediumPic, {\n    img: compare,\n    size: 900,\n    alt: \"difference between scriptable vs mono\",\n    subheading: \"some methods that inherit from scriptable objects type, compared to monobehavior\",\n    mdxType: \"MediumPic\"\n  }), mdx(\"h3\", null, `Scriptable Objects Vs Monobehaviors`), mdx(\"p\", null, `As you can see the only new method you get through using Scriptable Objects is OnDestoy() and you don't have access to the game loop through functions like\nupdate and start. This is an important attribute! `), mdx(\"p\", null, `Scriptable objects can not be attached to components as a gameobject instead they are created as project asset files.`), mdx(\"p\", null, `Monobehaviors always live on a game object, so by design their bound to an instance of a gameobject and because of that when you want to access the data for a prefab, each instance will have a copy of the transform and the gameobject which is a waste of space. `), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `moral of the story, if your prefab doesn't need access to gameobject or transform, and you want to save memory, you should use Scriptable Objects instead of Monobehaviors. If you'd like more information on this topic `, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=PVOVIxNxxeQ\"\n  }, `here`), ` is a video created by Unity on the topic.`)), mdx(SideNote, {\n    title: \"My Use Case\",\n    text: \"In my game, I use scriptable objects to define each page in my skillbook. Its so great this way because that object is used among various scenes, and in the past, when the variables were attached to the script, there were differences in values because it was able to be one value in one scene and another value in another scene. Now I just edit the Scriptable Object and drag it into all the scenes.\",\n    mdxType: \"SideNote\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport model from \"./model.jpg\"\nimport ice from \"./iceberg.png\"\nimport compare from \"./compare.png\"\nimport SideNote from \"../../../components/blogComponents/SideNote/SideNote.tsx\";\nimport MediumPic from \"../../../components/blogComponents/Pictures/MediumPic\";\nexport const _frontmatter = {\n  \"path\": \"/unity-progress\",\n  \"date\": \"28-09-2021\",\n  \"lastUpdated\": \"16-12-2016\",\n  \"title\": \"6 Important Things I Learned from Half a Year Using Unity \",\n  \"category\": \"GameDev\",\n  \"tags\": [],\n  \"exerpt\": \"Unity\",\n  \"status\": \"🌿\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <MediumPic img={ice} size={500} alt=\"code\" subheading=\"the Game Dev Iceberg\" mdxType=\"MediumPic\" />  \n    <h3>{`My Programming Experience Before Unity`}</h3>\n    <p>{`A bit of context to my programming experience, I haven't had too much experience with statically typed languages, I used mostly javascript and python, though I had one class in University on Java. `}</p>\n    <p>{`It was a tough decision to decide which route to take to build my 2d game. Godot was really rising in popularity, but I ended up going with Unity due to familiarity and the strong user base. I was also hesitant with how much could get done with a\ndynamic language like Godot, unity being written with C# meant that it was static, and in my understanding, static languages can handle bigger loads of information more efficiently.`}</p>\n    <p>{`Through the 8 months of using unity at the time of writting this article, there are some new concepts I've learned and I've seen becoming important with Unity, and OOP.`}</p>\n    <h3>{`Important Unity / C# / OOP Concepts`}</h3>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Monobehavior - Unity`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Singleton design pattern - OOP`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`State Machines - Unity`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Delegate - C#`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Event System - Unity`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Scriptable Objects - Unity`}</p>\n        <p parentName=\"li\">{`1 - Monobehavior `}</p>\n      </li>\n    </ol>\n    <hr></hr>\n    <p>{`Honestly I never thought about how important it was to take a dive into Monobehavior until writing this article. Monohevaior is\nwhat `}<strong parentName=\"p\">{`most`}</strong>{` of your scripts will inherit from. `}</p>\n    <SideNote title=\"Inheritance\" text=\"Inheritance is an object oriented concept. Inheritance are  abilities you recieve, its like when you play an RPG and you get the wizard class, you inherit certian abilities from that class. \" mdxType=\"SideNote\" />\n    <p>{`When I looked into the Monobehavior I notice some Methods I had no idea that existed and could be very useful, for instance,\nOnMouseDrag, OnMouseDown, and OnMouseEnter, these methods can help when dealing with input from the mouse to develop some really intricate\nsystems.`}</p>\n    <p>{`take some time to look at more of the methods that come with Monobehavior `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.unity3d.com/ScriptReference/MonoBehaviour.html\"\n      }}>{`here`}</a>{`, it will help you undertstand why its important and the full power your scripts that inherit from Monobehavior have. `}</p>\n    <SideNote title=\"Coroutines\" text=\"The MonoBehaviour class allows you to start, stop, and manage Coroutines. Coroutines are so important when you need to delay an action in code, lets say after you eliminate an enemy with you're trusty sword, you want to wait till the death animation plays out to destroy the gameObject, you can fire up a coroutine function to wait around 5 seconds until it destroys that game object.\" mdxType=\"SideNote\" />\n    <h2>{`2 - Singleton Design Pattern`}</h2>\n    <p>{`now this is a concept that comes when you start diving into OOP deeper. If you're a beginner programmer, it might not be the best time to\nunderstand this concept, but continue reading to see whats ahead of the horizon. A singleton is a `}<strong parentName=\"p\">{`Design Pattern`}</strong>{`. What is a design pattern\nyou may ask? `}</p>\n    <SideNote title=\"Design Pattern\" text=\"a description or template for how to solve a problem that can be used in many different situations.Think of it \nthis way, if you're programming somehing, chances are many other people have built that same thing you're\nbuiding, and many people have faced the same problem as you. Because programmers have to build the same parts so often, there are some parts that \nhave been tested and perfected and they are the best solution to the problem. Like a cookie cutter of a gingerbread man is the best way to make a gingerbread man cookie, a Desgin pattern for solving x problem is the best way to solve x\" mdxType=\"SideNote\" />\n    <p>{` For example, the Singleton design pattern is the `}<em parentName=\"p\">{`best`}</em>{` way to implement something that should only have `}<em parentName=\"p\">{`one`}</em>{` instance.  For instance in my game, there is only `}<em parentName=\"p\">{`one`}</em>{`\nskillbook. And how the code works is that it only instantiates the class once. The code for a singleton makes it very safe, because if we\naccidently instantiate two instances and update 1 and then read the other, you can see how this can get very messy. `}</p>\n    <p>{`Its very simple to lookup singleton demonstrations all over the web so I'll leave it to you, just some important features I want to highlight is the fact that the instance variable inside of the singleton is `}<strong parentName=\"p\">{`static`}</strong>{` this is important because it can be easily accessed all throughout\nyour code, and you know you're accessing the correct class because there is only instance of it.`}</p>\n    <h2>{`3 - State Machines`}</h2>\n    <p>{`I've been unexcusably hesitant to try out Unity State Machines. I finally threw in the towel\nand got cracking on it when I was programming the AI for an enemy in my game.`}</p>\n    <p>{`The first thing I realized was that you create State Machine Scripts differently from normal scripts\nin unity. In order to create State Machine (SM) scripts you must open the animator tab, and click on\nan animation, then in the inspector window click `}{`[Add Behavior]`}{` once you open up the created script\nyou'll realize that the script no longer inherits from MonoBehavior but from StateMachineBehaviour. There should be some commented out functions:  OnStateEnter(),\nOnStateUpdate(), OnStateExit(), OnStateMove() and OnStateIK().\nFor now the first 3 are the most important and are pretty self explanatory.\nThe first `}{`[OneStateEnter]`}{` is called once the animation state is entered, the second `}{`[OnStateUpdate]`}{` is a loop that is\ncalled at each Update frame except for the first and last frame. Finally `}{`[OnStateExit]`}{` is called on the last update frame when a state machine evaluates this state.`}</p>\n    <p>{`I don't know about you but I've used way too many Coroutines and unnecessary code controlling when the state changes, and when to change using methods like,\nanimator.GetBool(\"state\") or animator.SetBool(\"state\", false) peppered throughout my code. Its nice to have a central place that controls the animation state just\nto clean up and compartmentalize things. `}</p>\n    <p>{`Another neat thing about state machines is that in the function it already supplys you with that gameobjects animator so you don't need to fetch it in a variable. `}</p>\n    <p>{`For my first use case, I used state machine to control the enemy in my game through 4 state, `}</p>\n    <ol>\n      <li parentName=\"ol\">{`Patrolling State - When the enemy chooses a random location and walks to that random position.`}</li>\n      <li parentName=\"ol\">{`Follow State - when the enemy detects me and starts following me.`}</li>\n      <li parentName=\"ol\">{`Attack State - after the enemy follows me and is within range to attack.`}</li>\n      <li parentName=\"ol\">{`Idle State - after the enemy gets to the patrol states random position, and it waits in that position for around 4 seconds.`}</li>\n    </ol>\n    <h2>{`4 - Delegate`}</h2>\n    <p>{`Delegates are actually something very `}<em parentName=\"p\">{`small`}</em>{` to understand, I say this because I held off learning them because the description was confusing\nto me and in tern I became intimidated, but let me try to explain it so its simple and easy to understand. You know whenever you make a new script\nand you need to declare all the variables close to the top of the script? well a delegate is a variable that holds a function, so something like:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`public delegate int PerformCalculation(int x, int y);\n\nPerformCalculation add;\n`}</code></pre>\n    <p>{`so all we did was made a random function that accepts 2 arguments, at this point we havent `}<em parentName=\"p\">{`defined`}</em>{` what the function/delegate does, all we did\nwas say it needs 2 variables. Then we gave the delegate a variable name, add.`}</p>\n    <p>{`so when you want to use it, you need to assign a function to this delegate:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`static bool adding(int number1, int number2)\n{\n    return number1 + number2;\n}\n\nadd = adding; \n`}</code></pre>\n    <p>{`now our delegate add has the function value adding, we did this in 2 steps, we could have named the delegate and assigned its value in one step\nby doing this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`PerformCalculation add = adding;\n`}</code></pre>\n    <p>{`now our add delegate becomed that function that adds 2 numbers, and in the future I can even assign our add delegate to a different function.\nnow if I wanted to use the add delegate its like this`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`int value = add(1,2);\n`}</code></pre>\n    <p>{`it works the same as a normal function.\nAnd thats all there is to delegates! Its super easy and its so important in Unity and Gamedev to pass functions to different scripts, expecially when you want to separate front and backend. `}</p>\n    <h2>{`5 - Event System`}</h2>\n    <p>{`This concept is very interesting. You could produce a whole game without using this, but what it does, `}<em parentName=\"p\">{`is it makes your code a lot better`}</em>{`. The reason\nwhy you `}<em parentName=\"p\">{`should`}</em>{` use the Event System is because it allows you to compartmentalize logic more efficiently. Your Front-end Code should be separate from the\nbackend, with the event system you can write the backend once and have subscribers attached to it. These subscribers do not effect the backend code\nat all, the backend doesn't need to know who these subscribers are or what they're doing. For instance, I can have backend code that sets off an event when\nthe user clicks a particular key, lets say \"TAB\", when the user hits tab, the event is fired, and either no variables or some variables are passed to that event. `}</p>\n    <p>{`// Firing of event looks like this`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`if(Input.GeyKeyDown(KeyCode.Tab))\n{\n    OnClickTab?.Invoke();   <--- Fired Event\n}\n`}</code></pre>\n    <SideNote title=\"Event Naming Conventions\" text=\"When creating an event, its common practice to start with On[What the Event Reacts to], so in this case OnClickTab, but it could be many other things, OnLevelUp, OnPlayerDead, OnKillEnemy, the list goes on and on.\" mdxType=\"SideNote\" />\n    <p>{`I'm not going to go into the code, there's more to event than this little if statement, but before you get into that, we must understand the concept first, Events are very tricky to understand, but once you get it, you see that it was actually simple, the syntax is whats difficult to get the hang of. `}</p>\n    <p>{`The subscribers then activate when that event is fired and you can create methods inside the script with the subscribers to perform certain methods\nwhen that event is activated.`}</p>\n    <h3>{`Events`}</h3>\n    <p>{`Some events that monobehavior has access to are as follows: `}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Start- called when the GameObject begins to exist (either when the Scene is loaded, or the GameObject is instantiated).`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Update - called every frame.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Fixed Update- called every physics timestep.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`OnBecameVisible and OnBecameInvisible- called when a GameObject’s renderer enters or leaves a camera's view.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`OnCollisionEnter nd OnTriggerEnter - called when physics `}<strong parentName=\"p\">{`collisions`}</strong>{` or triggers occur.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`OnDestroy- called when the GameObject is destroyed.`}</p>\n      </li>\n    </ol>\n    <h2>{`6 - Scriptable Objects`}</h2>\n    <MediumPic img={compare} size={900} alt=\"difference between scriptable vs mono\" subheading=\"some methods that inherit from scriptable objects type, compared to monobehavior\" mdxType=\"MediumPic\" />  \n    <h3>{`Scriptable Objects Vs Monobehaviors`}</h3>\n    <p>{`As you can see the only new method you get through using Scriptable Objects is OnDestoy() and you don't have access to the game loop through functions like\nupdate and start. This is an important attribute! `}</p>\n    <p>{`Scriptable objects can not be attached to components as a gameobject instead they are created as project asset files.`}</p>\n    <p>{`Monobehaviors always live on a game object, so by design their bound to an instance of a gameobject and because of that when you want to access the data for a prefab, each instance will have a copy of the transform and the gameobject which is a waste of space. `}</p>\n    <ul>\n      <li parentName=\"ul\">{`moral of the story, if your prefab doesn't need access to gameobject or transform, and you want to save memory, you should use Scriptable Objects instead of Monobehaviors. If you'd like more information on this topic `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.youtube.com/watch?v=PVOVIxNxxeQ\"\n        }}>{`here`}</a>{` is a video created by Unity on the topic.`}</li>\n    </ul>\n    <SideNote title=\"My Use Case\" text=\"In my game, I use scriptable objects to define each page in my skillbook. Its so great this way because that object is used among various scenes, and in the past, when the variables were attached to the script, there were differences in values because it was able to be one value in one scene and another value in another scene. Now I just edit the Scriptable Object and drag it into all the scenes.\" mdxType=\"SideNote\" />\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}